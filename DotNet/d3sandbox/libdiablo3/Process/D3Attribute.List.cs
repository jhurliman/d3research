using System;
using System.Collections.Generic;
using System.Linq;

namespace libdiablo3.Process
{
    public partial class D3Attribute
    {
        public static readonly D3Attribute[] Attributes;
        public static readonly Dictionary<uint, D3Attribute> AttributesMap;

        static D3Attribute()
        {
            Attributes = typeof(D3Attribute).GetFields()
                .Where(a =>
                       a.IsStatic &&
                       (a.FieldType.Name == "D3AttributeI" ||
                        a.FieldType.Name == "D3AttributeF" ||
                        a.FieldType.Name == "D3AttributeB"))
                .Select(a => a.GetValue(null) as D3Attribute)
                .OrderBy(a => a.ID)
                .ToArray();

            AttributesMap = new Dictionary<uint, D3Attribute>(Attributes.Length);
            foreach (D3Attribute attribute in Attributes)
                AttributesMap.Add((uint)attribute.ID, attribute);
        }

        public static readonly D3AttributeI Axe_Bad_Data = new D3AttributeI(0, 0, -1, 0, 0, "", "", "Axe_Bad_Data", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Attribute_Timer = new D3AttributeI(1, 0, 5, 0, 1, "", "", "Attribute_Timer", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Attribute_Pool = new D3AttributeI(2, 0, -1, 0, 1, "", "", "Attribute_Pool", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI Death_Count = new D3AttributeI(3, 0, -1, 0, 1, "", "", "Death_Count", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI DualWield_Hand = new D3AttributeI(4, 0, -1, 0, 1, "", "", "DualWield_Hand", D3AttributeEncoding.IntMinMax, 1, 0, 2, 2);
        public static readonly D3AttributeI DualWield_Hand_Next = new D3AttributeI(5, 0, -1, 0, 1, "", "", "DualWield_Hand_Next", D3AttributeEncoding.IntMinMax, 1, 0, 2, 2);
        public static readonly D3AttributeB DualWield_Hands_Swapped = new D3AttributeB(6, 0, -1, 0, 1, "", "", "DualWield_Hands_Swapped", D3AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly D3AttributeI Respawn_Game_Time = new D3AttributeI(7, 0, -1, 0, 1, "", "", "Respawn_Game_Time", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI Backpack_Slots = new D3AttributeI(8, 0, -1, 0, 1, "", "", "Backpack_Slots", D3AttributeEncoding.IntMinMax, 1, 0, 128, 8);
        public static readonly D3AttributeI Shared_Stash_Slots = new D3AttributeI(9, 0, -1, 0, 1, "", "", "Shared_Stash_Slots", D3AttributeEncoding.IntMinMax, 1, 0, 210, 8);
        public static readonly D3AttributeI Strength = new D3AttributeI(10, 0, -1, 0, 0, "", "", "Strength", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Dexterity = new D3AttributeI(11, 0, -1, 0, 0, "", "", "Dexterity", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Intelligence = new D3AttributeI(12, 0, -1, 0, 0, "", "", "Intelligence", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Vitality = new D3AttributeI(13, 0, -1, 0, 0, "", "", "Vitality", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Strength_Total = new D3AttributeI(14, 0, -1, 0, 0, "", "((Strength + Stats_All_Bonus + Strength_Bonus) * (1 + Strength_Bonus_Percent)) * (1 - Strength_Reduction_Percent)", "Strength_Total", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Dexterity_Total = new D3AttributeI(15, 0, -1, 0, 0, "", "((Dexterity + Stats_All_Bonus + Dexterity_Bonus) * (1 + Dexterity_Bonus_Percent)) * (1 - Dexterity_Reduction_Percent)", "Dexterity_Total", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Intelligence_Total = new D3AttributeI(16, 0, -1, 0, 0, "", "((Intelligence + Stats_All_Bonus + Intelligence_Bonus) * (1 + Intelligence_Bonus_Percent)) * (1 - Intelligence_Reduction_Percent)", "Intelligence_Total", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Vitality_Total = new D3AttributeI(17, 0, -1, 0, 0, "", "((Vitality + Stats_All_Bonus + Vitality_Bonus) * (1 + Vitality_Bonus_Percent)) * (1 - Vitality_Reduction_Percent)", "Vitality_Total", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeF Strength_Bonus = new D3AttributeF(18, 0, -1, 0, 0, "", "", "Strength_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Dexterity_Bonus = new D3AttributeF(19, 0, -1, 0, 0, "", "", "Dexterity_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Intelligence_Bonus = new D3AttributeF(20, 0, -1, 0, 0, "", "", "Intelligence_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Vitality_Bonus = new D3AttributeF(21, 0, -1, 0, 0, "", "", "Vitality_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Strength_Bonus_Percent = new D3AttributeF(22, 0, -1, 0, 0, "", "", "Strength_Bonus_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Dexterity_Bonus_Percent = new D3AttributeF(23, 0, -1, 0, 0, "", "", "Dexterity_Bonus_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Intelligence_Bonus_Percent = new D3AttributeF(24, 0, -1, 0, 0, "", "", "Intelligence_Bonus_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Vitality_Bonus_Percent = new D3AttributeF(25, 0, -1, 0, 0, "", "", "Vitality_Bonus_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Strength_Reduction_Percent = new D3AttributeF(26, 0, -1, 1, 0, "", "", "Strength_Reduction_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Dexterity_Reduction_Percent = new D3AttributeF(27, 0, -1, 1, 0, "", "", "Dexterity_Reduction_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Intelligence_Reduction_Percent = new D3AttributeF(28, 0, -1, 1, 0, "", "", "Intelligence_Reduction_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Vitality_Reduction_Percent = new D3AttributeF(29, 0, -1, 1, 0, "", "", "Vitality_Reduction_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeI Primary_Damage_Attribute = new D3AttributeI(30, -1, -1, 3, 1, "", "", "Primary_Damage_Attribute", D3AttributeEncoding.IntMinMax, 31, -1, 3, 3);
        public static readonly D3AttributeI Attack = new D3AttributeI(31, 0, -1, 0, 0, "", "", "Attack", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Precision = new D3AttributeI(32, 0, -1, 0, 0, "", "", "Precision", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Defense = new D3AttributeI(33, 0, -1, 0, 0, "", "", "Defense", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Attack_Total = new D3AttributeI(34, 0, -1, 0, 0, "", "((Attack + Stats_All_Bonus + Attack_Bonus) * (1 + Attack_Bonus_Percent)) * (1 - Attack_Reduction_Percent)", "Attack_Total", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Precision_Total = new D3AttributeI(35, 0, -1, 0, 0, "", "((Precision + Stats_All_Bonus + Precision_Bonus) * (1 + Precision_Bonus_Percent)) * (1 - Precision_Reduction_Percent)", "Precision_Total", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Defense_Total = new D3AttributeI(36, 0, -1, 0, 0, "", "((Defense + Stats_All_Bonus + Defense_Bonus) * (1 + Defense_Bonus_Percent)) * (1 - Defense_Reduction_Percent)", "Defense_Total", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeF Attack_Bonus = new D3AttributeF(37, 0, -1, 0, 0, "", "", "Attack_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Precision_Bonus = new D3AttributeF(38, 0, -1, 0, 0, "", "", "Precision_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Defense_Bonus = new D3AttributeF(39, 0, -1, 0, 0, "", "", "Defense_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attack_Bonus_Percent = new D3AttributeF(40, 0, -1, 0, 0, "", "", "Attack_Bonus_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Precision_Bonus_Percent = new D3AttributeF(41, 0, -1, 0, 0, "", "", "Precision_Bonus_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Defense_Bonus_Percent = new D3AttributeF(42, 0, -1, 0, 0, "", "", "Defense_Bonus_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attack_Reduction_Percent = new D3AttributeF(43, 0, -1, 1, 0, "", "", "Attack_Reduction_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Precision_Reduction_Percent = new D3AttributeF(44, 0, -1, 1, 0, "", "", "Precision_Reduction_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Defense_Reduction_Percent = new D3AttributeF(45, 0, -1, 1, 0, "", "", "Defense_Reduction_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Armor = new D3AttributeF(46, 0, -1, 0, 0, "", "", "Armor", D3AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly D3AttributeF Armor_Bonus_Percent = new D3AttributeF(47, 0, -1, 0, 0, "", "", "Armor_Bonus_Percent", D3AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly D3AttributeF Armor_Item = new D3AttributeF(48, 0, -1, 0, 0, "", "0", "Armor_Item", D3AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly D3AttributeF Armor_Bonus_Item = new D3AttributeF(49, 0, -1, 0, 0, "", "", "Armor_Bonus_Item", D3AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly D3AttributeF Armor_Item_Percent = new D3AttributeF(50, 0, -1, 0, 0, "", "0", "Armor_Item_Percent", D3AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly D3AttributeF Armor_Item_SubTotal = new D3AttributeF(51, 0, -1, 0, 0, "FLOOR((Armor_Item + Armor_Bonus_Item) * (Armor_Item_Percent + 1))", "", "Armor_Item_SubTotal", D3AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly D3AttributeF Armor_Item_Total = new D3AttributeF(52, 0, -1, 0, 0, "(Armor_Item > 0)?(Max(Armor_Item_SubTotal, 1)):Armor_Item_SubTotal", "", "Armor_Item_Total", D3AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly D3AttributeF Armor_Total = new D3AttributeF(53, 0, -1, 0, 0, "", "FLOOR((Armor + Armor_Item_Total + Strength_Total) * (Armor_Bonus_Percent + 1))", "Armor_Total", D3AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly D3AttributeI Experience_Granted = new D3AttributeI(54, 0, -1, 0, 1, "", "", "Experience_Granted", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI Experience_Next = new D3AttributeI(55, 0, -1, 0, 1, "", "", "Experience_Next", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI Gold_Granted = new D3AttributeI(56, 0, -1, 0, 1, "", "", "Gold_Granted", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Gold = new D3AttributeI(57, 0, -1, 0, 1, "", "", "Gold", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeF Gold_Find = new D3AttributeF(58, 0, -1, 0, 0, "", "", "Gold_Find", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeI Level = new D3AttributeI(59, 0, -1, 0, 1, "", "", "Level", D3AttributeEncoding.IntMinMax, 31, -1, 127, 8);
        public static readonly D3AttributeI Level_Cap = new D3AttributeI(60, 0, -1, 0, 1, "", "", "Level_Cap", D3AttributeEncoding.IntMinMax, 1, -1, 127, 8);
        public static readonly D3AttributeF Magic_Find = new D3AttributeF(61, 0, -1, 0, 0, "", "", "Magic_Find", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Treasure_Find = new D3AttributeF(62, 0, 14, 0, 0, "", "", "Treasure_Find", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeI Resource_Cost_Reduction_Amount = new D3AttributeI(63, 0, 10, 0, 1, "", "", "Resource_Cost_Reduction_Amount", D3AttributeEncoding.IntMinMax, 9, -4095, 16383, 15);
        public static readonly D3AttributeF Resource_Cost_Reduction_Total = new D3AttributeF(64, 0, 10, 0, 0, "", "Resource_Cost_Reduction_Amount", "Resource_Cost_Reduction_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resource_Set_Point_Bonus = new D3AttributeF(65, 0, 10, 0, 0, "", "", "Resource_Set_Point_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Faster_Healing_Percent = new D3AttributeF(66, 0, -1, 0, 0, "", "", "Faster_Healing_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Spending_Resource_Heals_Percent = new D3AttributeF(67, 0, 10, 0, 0, "", "", "Spending_Resource_Heals_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Bonus_Healing_Received_Percent = new D3AttributeF(68, 0, -1, 0, 0, "", "", "Bonus_Healing_Received_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Reduced_Healing_Received_Percent = new D3AttributeF(69, 0, -1, 0, 0, "", "", "Reduced_Healing_Received_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Experience_Bonus = new D3AttributeF(70, 0, -1, 0, 0, "", "", "Experience_Bonus", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Experience_Bonus_Percent = new D3AttributeF(71, 0, -1, 0, 0, "", "", "Experience_Bonus_Percent", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Health_Globe_Bonus_Chance = new D3AttributeF(72, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Health_Globe_Bonus_Mult_Chance = new D3AttributeF(73, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Mult_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Health_Globe_Bonus_Health = new D3AttributeF(74, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Health", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Increased_Health_From_Globes_Percent = new D3AttributeF(75, 0, -1, 0, 0, "", "", "Increased_Health_From_Globes_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Increased_Health_From_Globes_Percent_Total = new D3AttributeF(76, 0, -1, 0, 0, "", "Increased_Health_From_Globes_Percent", "Increased_Health_From_Globes_Percent_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Bonus_Health_Percent_Per_Second_From_Globes = new D3AttributeF(77, 0, -1, 0, 0, "", "", "Bonus_Health_Percent_Per_Second_From_Globes", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Bonus_Health_Percent_Per_Second_From_Globes_Total = new D3AttributeF(78, 0, -1, 0, 0, "", "Bonus_Health_Percent_Per_Second_From_Globes", "Bonus_Health_Percent_Per_Second_From_Globes_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Mana_Gained_From_Globes_Percent = new D3AttributeF(79, 0, -1, 0, 0, "", "", "Mana_Gained_From_Globes_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Mana_Gained_From_Globes = new D3AttributeF(80, 0, -1, 0, 0, "", "", "Mana_Gained_From_Globes", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resistance = new D3AttributeF(81, 0, 0, 0, 0, "", "", "Resistance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resistance_Percent = new D3AttributeF(82, 0, 0, 0, 0, "", "", "Resistance_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resistance_Total = new D3AttributeF(83, 0, 0, 0, 0, "", "(Resistance + Resistance_All#NONE) * ((Resistance_Percent_All#NONE + Resistance_Percent + 1))", "Resistance_Total", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeF Resistance_All = new D3AttributeF(84, 0, -1, 0, 0, "", "", "Resistance_All", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resistance_Percent_All = new D3AttributeF(85, 0, -1, 0, 0, "", "", "Resistance_Percent_All", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeI Skill = new D3AttributeI(86, 0, 4, 0, 1, "", "", "Skill", D3AttributeEncoding.IntMinMax, 9, 0, 4095, 12);
        public static readonly D3AttributeI Skill_Total = new D3AttributeI(87, 0, 4, 0, 1, "", "Skill", "Skill_Total", D3AttributeEncoding.IntMinMax, 9, 0, 4095, 12);
        public static readonly D3AttributeI TeamID = new D3AttributeI(88, -1, -1, 1, 1, "", "", "TeamID", D3AttributeEncoding.IntMinMax, 31, -1, 23, 5);
        public static readonly D3AttributeI Team_Override = new D3AttributeI(89, -1, -1, 1, 1, "", "", "Team_Override", D3AttributeEncoding.IntMinMax, 31, -1, 23, 5);
        public static readonly D3AttributeB Invulnerable = new D3AttributeB(90, 0, -1, 1, 1, "", "", "Invulnerable", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Loading = new D3AttributeB(91, 0, -1, 1, 1, "", "", "Loading", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Loading_Player_ACD = new D3AttributeI(92, -1, -1, 3, 1, "", "", "Loading_Player_ACD", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Loading_Power_SNO = new D3AttributeI(93, -1, -1, 3, 1, "", "", "Loading_Power_SNO", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Loading_Anim_Tag = new D3AttributeI(94, -1, -1, 3, 1, "", "", "Loading_Anim_Tag", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeB Loading_NewGame = new D3AttributeB(95, 0, -1, 1, 1, "", "", "Loading_NewGame", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Auto_Porting_To_Save_Point = new D3AttributeB(96, 0, -1, 1, 1, "", "", "Auto_Porting_To_Save_Point", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB No_Damage = new D3AttributeB(97, 0, -1, 1, 1, "", "", "No_Damage", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB No_AutoPickup = new D3AttributeB(98, 0, -1, 1, 1, "", "", "No_AutoPickup", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeF Light_Radius_Percent_Bonus = new D3AttributeF(99, 0, 0, 0, 0, "", "", "Light_Radius_Percent_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Hitpoints_Cur = new D3AttributeF(100, 0, -1, 0, 0, "", "Min(Hitpoints_Cur.Agg, Hitpoints_Max_Total)", "Hitpoints_Cur", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeF Hitpoints_Factor_Level = new D3AttributeF(101, 0, -1, 0, 0, "", "", "Hitpoints_Factor_Level", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeF Hitpoints_Factor_Vitality = new D3AttributeF(102, 0, -1, 0, 0, "", "", "Hitpoints_Factor_Vitality", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeF Hitpoints_Total_From_Vitality = new D3AttributeF(103, 0, -1, 0, 0, "", "Vitality_Total * Hitpoints_Factor_Vitality", "Hitpoints_Total_From_Vitality", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeF Hitpoints_Total_From_Level = new D3AttributeF(104, 0, -1, 0, 0, "", "(Level - 1) * Hitpoints_Factor_Level", "Hitpoints_Total_From_Level", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeF Hitpoints_Granted = new D3AttributeF(105, 0, -1, 0, 0, "", "", "Hitpoints_Granted", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeI Hitpoints_Granted_Duration = new D3AttributeI(106, 0, -1, 0, 1, "", "", "Hitpoints_Granted_Duration", D3AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly D3AttributeF Hitpoints_Max = new D3AttributeF(107, 0, -1, 0, 0, "", "", "Hitpoints_Max", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeF Hitpoints_Max_Bonus = new D3AttributeF(108, 0, -1, 0, 0, "", "", "Hitpoints_Max_Bonus", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeF Hitpoints_Max_Total = new D3AttributeF(109, 0, -1, 0, 0, "", "Max((Hitpoints_Max + Hitpoints_Total_From_Level + Hitpoints_Total_From_Vitality + Hitpoints_Max_Bonus) * (Hitpoints_Max_Percent_Bonus + Hitpoints_Max_Percent_Bonus_Item + 1), 1)", "Hitpoints_Max_Total", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeF Hitpoints_Percent = new D3AttributeF(110, 0, -1, 0, 0, "", "", "Hitpoints_Percent", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeF Hitpoints_Regen_Per_Second = new D3AttributeF(111, 0, -1, 0, 0, "", "", "Hitpoints_Regen_Per_Second", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeF Hitpoints_Max_Percent_Bonus = new D3AttributeF(112, 0, -1, 0, 0, "", "", "Hitpoints_Max_Percent_Bonus", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeF Hitpoints_Max_Percent_Bonus_Item = new D3AttributeF(113, 0, -1, 0, 0, "", "", "Hitpoints_Max_Percent_Bonus_Item", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeF Hitpoints_Healed_Target = new D3AttributeF(114, 0, -1, 0, 0, "", "", "Hitpoints_Healed_Target", D3AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly D3AttributeI Resource_Type_Primary = new D3AttributeI(115, -1, -1, 3, 1, "", "", "Resource_Type_Primary", D3AttributeEncoding.IntMinMax, 1, -1, 7, 4);
        public static readonly D3AttributeI Resource_Type_Secondary = new D3AttributeI(116, -1, -1, 3, 1, "", "", "Resource_Type_Secondary", D3AttributeEncoding.IntMinMax, 1, -1, 7, 4);
        public static readonly D3AttributeF Resource_Cur = new D3AttributeF(117, 0, 10, 0, 0, "", "Max(Resource_Cur.Agg, 0)", "Resource_Cur", D3AttributeEncoding.Float32, 1, 0, 0, 32);
        public static readonly D3AttributeF Resource_Max = new D3AttributeF(118, 0, 10, 0, 0, "", "", "Resource_Max", D3AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly D3AttributeF Resource_Max_Bonus = new D3AttributeF(119, 0, 10, 0, 0, "", "", "Resource_Max_Bonus", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Resource_Max_Total = new D3AttributeF(120, 0, 10, 0, 0, "", "Max((Resource_Max + ((Level#NONE - 1) * Resource_Factor_Level) + Resource_Max_Bonus) * (Resource_Max_Percent_Bonus + 1), 0)", "Resource_Max_Total", D3AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly D3AttributeF Resource_Factor_Level = new D3AttributeF(121, 0, 10, 0, 0, "", "", "Resource_Factor_Level", D3AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly D3AttributeF Resource_Granted = new D3AttributeF(122, 0, 10, 0, 0, "", "", "Resource_Granted", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeI Resource_Granted_Duration = new D3AttributeI(123, 0, 10, 0, 1, "", "", "Resource_Granted_Duration", D3AttributeEncoding.IntMinMax, 9, 0, 16777215, 24);
        public static readonly D3AttributeF Resource_Percent = new D3AttributeF(124, 0, 10, 0, 0, "", "", "Resource_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resource_Regen_Per_Second = new D3AttributeF(125, 0, 10, 0, 0, "", "", "Resource_Regen_Per_Second", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Resource_Regen_Bonus_Percent = new D3AttributeF(126, 0, 10, 0, 0, "", "", "Resource_Regen_Bonus_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resource_Regen_Total = new D3AttributeF(127, 0, 10, 0, 0, "", "Resource_Regen_Per_Second * (1 + Resource_Regen_Bonus_Percent) + (Resource_Regen_Percent_Per_Second * Resource_Max_Total)", "Resource_Regen_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resource_Max_Percent_Bonus = new D3AttributeF(128, 0, 10, 0, 0, "", "Resource_Percent", "Resource_Max_Percent_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resource_Capacity_Used = new D3AttributeF(129, 0, 10, 0, 0, "", "", "Resource_Capacity_Used", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Resource_Effective_Max = new D3AttributeF(130, 0, 10, 0, 0, "", "Resource_Max_Total - Resource_Capacity_Used", "Resource_Effective_Max", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Resource_Regen_Percent_Per_Second = new D3AttributeF(131, 0, 10, 0, 0, "", "", "Resource_Regen_Percent_Per_Second", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Resource_Degeneration_Stop_Point = new D3AttributeF(132, 0, 10, 0, 0, "", "", "Resource_Degeneration_Stop_Point", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Movement_Scalar = new D3AttributeF(133, 0, -1, 0, 0, "", "", "Movement_Scalar", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Walking_Rate = new D3AttributeF(134, 0, -1, 0, 0, "", "", "Walking_Rate", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Running_Rate = new D3AttributeF(135, 0, -1, 0, 0, "", "", "Running_Rate", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Sprinting_Rate = new D3AttributeF(136, 0, -1, 0, 0, "", "", "Sprinting_Rate", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Strafing_Rate = new D3AttributeF(137, 0, -1, 0, 0, "", "", "Strafing_Rate", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Walking_Rate_Total = new D3AttributeF(138, 0, -1, 0, 0, "", "Walking_Rate * Movement_Scalar_Total", "Walking_Rate_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Running_Rate_Total = new D3AttributeF(139, 0, -1, 0, 0, "", "Running_Rate * Movement_Scalar_Total", "Running_Rate_Total", D3AttributeEncoding.Float16, 41, 0, 0, 16);
        public static readonly D3AttributeF Last_Running_Rate = new D3AttributeF(140, 0, -1, 0, 0, "", "", "Last_Running_Rate", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Sprinting_Rate_Total = new D3AttributeF(141, 0, -1, 0, 0, "", "Sprinting_Rate * Movement_Scalar_Total", "Sprinting_Rate_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Strafing_Rate_Total = new D3AttributeF(142, 0, -1, 0, 0, "", "Strafing_Rate * Movement_Scalar_Total", "Strafing_Rate_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Movement_Bonus_Total = new D3AttributeF(143, 0, -1, -1, 0, "0", "Movement_Bonus_Run_Speed", "Movement_Bonus_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Movement_Scalar_Subtotal = new D3AttributeF(144, 0, -1, 0, 0, "0", "Max(0.1, Movement_Scalar) * (1 + Movement_Bonus_Total) * (1 - Movement_Scalar_Reduction_Percent * (1 - Min(1, Movement_Scalar_Reduction_Resistance)))", "Movement_Scalar_Subtotal", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Movement_Scalar_Capped_Total = new D3AttributeF(145, 0, -1, 0, 0, "0", "Min(1.25, Movement_Scalar_Subtotal)", "Movement_Scalar_Capped_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Movement_Scalar_Uncapped_Bonus = new D3AttributeF(146, 0, -1, 0, 0, "", "", "Movement_Scalar_Uncapped_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Movement_Scalar_Total = new D3AttributeF(147, 0, -1, 0, 0, "0", "Movement_Scalar_Capped_Total + Movement_Scalar_Uncapped_Bonus", "Movement_Scalar_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Movement_Bonus_Run_Speed = new D3AttributeF(148, 0, -1, 1, 0, "", "", "Movement_Bonus_Run_Speed", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Casting_Speed = new D3AttributeF(149, 0, -1, 0, 0, "", "", "Casting_Speed", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Casting_Speed_Bonus = new D3AttributeF(150, 0, -1, 0, 0, "", "", "Casting_Speed_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Casting_Speed_Total = new D3AttributeF(151, 0, -1, 0, 0, "", "(Casting_Speed + Casting_Speed_Bonus) * Max(0.1, 1 + Casting_Speed_Percent)", "Casting_Speed_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeB Always_Hits = new D3AttributeB(152, 0, -1, 1, 1, "", "", "Always_Hits", D3AttributeEncoding.IntMinMax, 3, 0, 1, 1);
        public static readonly D3AttributeF Hit_Chance = new D3AttributeF(153, 0, -1, 0, 0, "", "", "Hit_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attacks_Per_Second_Item = new D3AttributeF(154, 0, -1, 0, 0, "", "0", "Attacks_Per_Second_Item", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attacks_Per_Second_Item_Percent = new D3AttributeF(155, 0, -1, 0, 0, "", "0", "Attacks_Per_Second_Item_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attacks_Per_Second_Item_Subtotal = new D3AttributeF(156, 0, -1, 0, 0, "Attacks_Per_Second_Item * (1 + Attacks_Per_Second_Item_Percent)", "0", "Attacks_Per_Second_Item_Subtotal", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attacks_Per_Second_Item_Bonus = new D3AttributeF(157, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Item_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attacks_Per_Second_Item_Total = new D3AttributeF(158, 0, -1, 0, 0, "(Attacks_Per_Second_Item_Subtotal + Attacks_Per_Second_Item_Bonus)", "", "Attacks_Per_Second_Item_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attacks_Per_Second = new D3AttributeF(159, 0, -1, 0, 0, "0", "", "Attacks_Per_Second", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attacks_Per_Second_Bonus = new D3AttributeF(160, 0, -1, 0, 0, "0", "", "Attacks_Per_Second_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attacks_Per_Second_Total = new D3AttributeF(161, 0, -1, 0, 0, "0", "Max(0.01, (((Attacks_Per_Second_Item_CurrentHand > 0.0) ? Attacks_Per_Second_Item_CurrentHand : Attacks_Per_Second) + Attacks_Per_Second_Bonus + Attacks_Per_Second_Item_Bonus) * Max(0.1, (1 + Attacks_Per_Second_Percent)))", "Attacks_Per_Second_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attacks_Per_Second_Percent = new D3AttributeF(162, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF AI_Cooldown_Reduction_Percent = new D3AttributeF(163, 0, -1, 0, 0, "0", "", "AI_Cooldown_Reduction_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Power_Cooldown_Reduction_Percent = new D3AttributeF(164, 0, -1, 0, 0, "0", "", "Power_Cooldown_Reduction_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Damage_Delta = new D3AttributeF(165, 0, 0, 0, 0, "", "", "Damage_Delta", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Delta_Total = new D3AttributeF(166, 0, 0, 0, 0, "", "Max(Damage_Delta - Damage_Bonus_Min + Damage_Weapon_Delta_Total_CurrentHand, 0)", "Damage_Delta_Total", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Min = new D3AttributeF(167, 0, 0, 0, 0, "", "", "Damage_Min", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Bonus_Min = new D3AttributeF(168, 0, 0, 0, 0, "", "", "Damage_Bonus_Min", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Min_Total = new D3AttributeF(169, 0, 0, 0, 0, "", "Damage_Min_Subtotal + Damage_Type_Percent_Bonus * Damage_Min_Subtotal#Physical", "Damage_Min_Total", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Min_Subtotal = new D3AttributeF(170, 0, 0, 0, 0, "", "Damage_Min + Damage_Bonus_Min + Damage_Weapon_Min_Total_CurrentHand", "Damage_Min_Subtotal", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Percent_All_From_Skills = new D3AttributeF(171, 0, -1, 0, 0, "", "", "Damage_Percent_All_From_Skills", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Weapon_Delta = new D3AttributeF(172, 0, 0, 0, 0, "", "", "Damage_Weapon_Delta", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Delta_SubTotal = new D3AttributeF(173, 0, 0, 0, 0, "(Damage_Weapon_Delta > 0.0) ? (Max(1, Damage_Weapon_Delta - Damage_Weapon_Bonus_Min)) : Damage_Weapon_Delta", "", "Damage_Weapon_Delta_SubTotal", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Max = new D3AttributeF(174, 0, 0, 0, 0, "(Damage_Weapon_Min + Damage_Weapon_Delta)", "", "Damage_Weapon_Max", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Max_Total = new D3AttributeF(175, 0, 0, 0, 0, "(Damage_Weapon_Min_Total + Damage_Weapon_Delta_Total)", "", "Damage_Weapon_Max_Total", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Delta_Total = new D3AttributeF(176, 0, 0, 0, 0, "Max((Damage_Weapon_Delta_SubTotal + Damage_Weapon_Bonus_Delta) * (1 + Damage_Weapon_Percent_Total), 0)", "", "Damage_Weapon_Delta_Total", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Delta_Total_All = new D3AttributeF(177, 0, -1, 0, 0, "(Damage_Weapon_Delta_Total#Physical + Damage_Weapon_Delta_Total#Fire + Damage_Weapon_Delta_Total#Cold + Damage_Weapon_Delta_Total#Lightning + Damage_Weapon_Delta_Total#Poison + Damage_Weapon_Delta_Total#Arcane + Damage_Weapon_Delta_Total#Holy)", "", "Damage_Weapon_Delta_Total_All", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Bonus_Delta = new D3AttributeF(178, 0, 0, 0, 0, "", "", "Damage_Weapon_Bonus_Delta", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Min = new D3AttributeF(179, 0, 0, 0, 0, "", "", "Damage_Weapon_Min", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Min_Total = new D3AttributeF(180, 0, 0, 0, 0, "(Damage_Weapon_Min + Damage_Weapon_Bonus_Min) * (1 + Damage_Weapon_Percent_Total)", "", "Damage_Weapon_Min_Total", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Min_Total_All = new D3AttributeF(181, 0, -1, 0, 0, "(Damage_Weapon_Min_Total#Physical + Damage_Weapon_Min_Total#Fire + Damage_Weapon_Min_Total#Cold + Damage_Weapon_Min_Total#Lightning + Damage_Weapon_Min_Total#Poison + Damage_Weapon_Min_Total#Arcane + Damage_Weapon_Min_Total#Holy)", "", "Damage_Weapon_Min_Total_All", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Bonus_Min = new D3AttributeF(182, 0, 0, 0, 0, "", "", "Damage_Weapon_Bonus_Min", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Percent_Bonus = new D3AttributeF(183, 0, 0, 0, 0, "", "", "Damage_Weapon_Percent_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Weapon_Percent_All = new D3AttributeF(184, 0, -1, 0, 0, "", "", "Damage_Weapon_Percent_All", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Weapon_Percent_Total = new D3AttributeF(185, 0, 0, 0, 0, "Damage_Weapon_Percent_Bonus + Damage_Weapon_Percent_All#NONE", "", "Damage_Weapon_Percent_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Type_Percent_Bonus = new D3AttributeF(186, 0, 0, 0, 0, "", "", "Damage_Type_Percent_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Percent_Bonus_Witchdoctor = new D3AttributeF(187, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Witchdoctor", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Percent_Bonus_Wizard = new D3AttributeF(188, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Wizard", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeI Crit_Percent_Base = new D3AttributeI(189, 0, -1, 0, 0, "", "", "Crit_Percent_Base", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Crit_Percent_Bonus_Capped = new D3AttributeI(190, 0, -1, 0, 0, "", "", "Crit_Percent_Bonus_Capped", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Crit_Percent_Bonus_Uncapped = new D3AttributeI(191, 0, -1, 0, 0, "", "", "Crit_Percent_Bonus_Uncapped", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Crit_Percent_Cap = new D3AttributeI(192, 0, -1, 0, 0, "", "", "Crit_Percent_Cap", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Crit_Damage_Percent = new D3AttributeI(193, 0, -1, 0, 0, "", "", "Crit_Damage_Percent", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Crit_Effect_Time = new D3AttributeI(194, 0, -1, 3, 1, "", "", "Crit_Effect_Time", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeF Pierce_Chance = new D3AttributeF(195, 0, -1, 0, 0, "", "", "Pierce_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Absorb_Percent = new D3AttributeF(196, 0, -1, 0, 0, "", "", "Damage_Absorb_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Reduction_Total = new D3AttributeF(197, 0, 0, 0, 0, "", "", "Damage_Reduction_Total", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Reduction_Current = new D3AttributeF(198, 0, 0, 0, 0, "", "", "Damage_Reduction_Current", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeI Damage_Reduction_Last_Tick = new D3AttributeI(199, 0, 0, 3, 1, "", "", "Damage_Reduction_Last_Tick", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeF Block_Chance = new D3AttributeF(200, 0, -1, 0, 0, "", "", "Block_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Block_Chance_Total = new D3AttributeF(201, 0, -1, 0, 0, "", "Block_Chance + Block_Chance_Item_Total", "Block_Chance_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Block_Chance_Bonus_Item = new D3AttributeF(202, 0, -1, 0, 0, "", "", "Block_Chance_Bonus_Item", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Block_Chance_Item = new D3AttributeF(203, 0, -1, 0, 0, "", "0", "Block_Chance_Item", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Block_Chance_Item_Total = new D3AttributeF(204, 0, -1, 0, 0, "Block_Chance_Item + Block_Chance_Bonus_Item", "", "Block_Chance_Item_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Block_Amount = new D3AttributeF(205, 0, -1, 0, 0, "", "", "Block_Amount", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Block_Amount_Bonus_Percent = new D3AttributeF(206, 0, -1, 0, 0, "", "", "Block_Amount_Bonus_Percent", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Block_Amount_Total_Min = new D3AttributeF(207, 0, -1, 0, 0, "", "(Block_Amount + Block_Amount_Item_Min + Block_Amount_Item_Bonus) * (1 + Block_Amount_Bonus_Percent)", "Block_Amount_Total_Min", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Block_Amount_Total_Max = new D3AttributeF(208, 0, -1, 0, 0, "", "(Block_Amount + Block_Amount_Item_Min + Block_Amount_Item_Delta + Block_Amount_Item_Bonus) * (1 + Block_Amount_Bonus_Percent)", "Block_Amount_Total_Max", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Block_Amount_Item_Min = new D3AttributeF(209, 0, -1, 0, 0, "", "", "Block_Amount_Item_Min", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Block_Amount_Item_Delta = new D3AttributeF(210, 0, -1, 0, 0, "", "", "Block_Amount_Item_Delta", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Block_Amount_Item_Bonus = new D3AttributeF(211, 0, -1, 0, 0, "", "", "Block_Amount_Item_Bonus", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Dodge_Chance_Bonus = new D3AttributeF(212, 0, -1, 7, 0, "", "", "Dodge_Chance_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Dodge_Chance_Bonus_Melee = new D3AttributeF(213, 0, -1, 7, 0, "", "", "Dodge_Chance_Bonus_Melee", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Dodge_Chance_Bonus_Ranged = new D3AttributeF(214, 0, -1, 7, 0, "", "", "Dodge_Chance_Bonus_Ranged", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Get_Hit_Current = new D3AttributeF(215, 0, -1, 0, 0, "", "", "Get_Hit_Current", D3AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly D3AttributeF Get_Hit_Max_Base = new D3AttributeF(216, 0, -1, 0, 0, "", "", "Get_Hit_Max_Base", D3AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly D3AttributeF Get_Hit_Max_Per_Level = new D3AttributeF(217, 0, -1, 0, 0, "", "", "Get_Hit_Max_Per_Level", D3AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly D3AttributeF Get_Hit_Max = new D3AttributeF(218, 0, -1, 0, 0, "", "Get_Hit_Max_Base + (Get_Hit_Max_Per_Level * Level)", "Get_Hit_Max", D3AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly D3AttributeF Get_Hit_Recovery_Base = new D3AttributeF(219, 0, -1, 0, 0, "", "", "Get_Hit_Recovery_Base", D3AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly D3AttributeF Get_Hit_Recovery_Per_Level = new D3AttributeF(220, 0, -1, 0, 0, "", "", "Get_Hit_Recovery_Per_Level", D3AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly D3AttributeF Get_Hit_Recovery = new D3AttributeF(221, 0, -1, 0, 0, "", "Get_Hit_Recovery_Base + (Get_Hit_Recovery_Per_Level * Level)", "Get_Hit_Recovery", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Get_Hit_Damage = new D3AttributeF(222, 0, -1, 0, 0, "", "", "Get_Hit_Damage", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Get_Hit_Damage_Scalar = new D3AttributeF(223, 0, -1, 0, 0, "", "", "Get_Hit_Damage_Scalar", D3AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly D3AttributeI Last_Damage_MainActor = new D3AttributeI(224, -1, -1, 3, 1, "", "", "Last_Damage_MainActor", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI Last_ACD_Attacked = new D3AttributeI(225, -1, -1, 3, 1, "", "", "Last_ACD_Attacked", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeB Ignores_Critical_Hits = new D3AttributeB(226, 0, -1, 1, 1, "", "", "Ignores_Critical_Hits", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Immunity = new D3AttributeB(227, 0, -1, 1, 1, "", "", "Immunity", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Untargetable = new D3AttributeB(228, 0, -1, 1, 1, "", "", "Untargetable", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Immobolize = new D3AttributeB(229, 0, -1, 1, 1, "", "", "Immobolize", D3AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly D3AttributeB Immune_To_Knockback = new D3AttributeB(230, 0, -1, 1, 1, "", "", "Immune_To_Knockback", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Power_Immobilize = new D3AttributeB(231, 0, -1, 1, 1, "", "", "Power_Immobilize", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeF Stun_Chance = new D3AttributeF(232, 0, -1, 0, 0, "", "", "Stun_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Stun_Length = new D3AttributeF(233, 0, -1, 0, 0, "", "", "Stun_Length", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Stun_Recovery = new D3AttributeF(234, 0, -1, 0, 0, "", "", "Stun_Recovery", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Stun_Recovery_Speed = new D3AttributeF(235, 0, -1, 0, 0, "", "", "Stun_Recovery_Speed", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeB Stunned = new D3AttributeB(236, 0, -1, 1, 1, "", "", "Stunned", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Stun_Immune = new D3AttributeB(237, 0, -1, 1, 1, "", "", "Stun_Immune", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeF Poison_Length_Reduction = new D3AttributeF(238, 0, -1, 0, 0, "", "", "Poison_Length_Reduction", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeB Poisoned = new D3AttributeB(239, 0, -1, 1, 1, "", "", "Poisoned", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Bleeding = new D3AttributeB(240, 0, -1, 1, 1, "", "", "Bleeding", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeF Bleed_Duration = new D3AttributeF(241, 0, -1, 0, 0, "", "", "Bleed_Duration", D3AttributeEncoding.Float16, 1, 0, 0, 16);
        public static readonly D3AttributeB Chilled = new D3AttributeB(242, 0, -1, 1, 1, "", "", "Chilled", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeF Freeze_Length_Reduction = new D3AttributeF(243, 0, -1, 0, 0, "", "", "Freeze_Length_Reduction", D3AttributeEncoding.Float16, 1, 0, 0, 16);
        public static readonly D3AttributeB Freeze_Immune = new D3AttributeB(244, 0, -1, 1, 1, "", "", "Freeze_Immune", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Webbed = new D3AttributeB(245, 0, -1, 1, 1, "", "", "Webbed", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Slow = new D3AttributeB(246, 0, -1, 1, 1, "", "", "Slow", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB FireAura = new D3AttributeB(247, 0, -1, 1, 1, "", "", "FireAura", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB LightningAura = new D3AttributeB(248, 0, -1, 1, 1, "", "", "LightningAura", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB ColdAura = new D3AttributeB(249, 0, -1, 1, 1, "", "", "ColdAura", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB PoisonAura = new D3AttributeB(250, 0, -1, 1, 1, "", "", "PoisonAura", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Blind = new D3AttributeB(251, 0, -1, 1, 1, "", "", "Blind", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Enraged = new D3AttributeB(252, 0, -1, 1, 1, "", "", "Enraged", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Slowdown_Immune = new D3AttributeB(253, 0, -1, 1, 1, "", "", "Slowdown_Immune", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Gethit_Immune = new D3AttributeB(254, 0, -1, 1, 1, "", "", "Gethit_Immune", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeF Suffocation_Per_Second = new D3AttributeF(255, 0, -1, 0, 0, "", "", "Suffocation_Per_Second", D3AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly D3AttributeF Suffocation_Unit_Value = new D3AttributeF(256, 0, -1, 1, 0, "", "", "Suffocation_Unit_Value", D3AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly D3AttributeF Thorns_Percent = new D3AttributeF(257, 0, 0, 0, 0, "", "", "Thorns_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Thorns_Percent_All = new D3AttributeF(258, 0, -1, 0, 0, "", "", "Thorns_Percent_All", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Thorns_Percent_Total = new D3AttributeF(259, 0, 0, 0, 0, "", "Thorns_Percent + Thorns_Percent_All#NONE", "Thorns_Percent_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Thorns_Fixed = new D3AttributeF(260, 0, 0, 0, 0, "", "", "Thorns_Fixed", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Steal_Health_Percent = new D3AttributeF(261, 0, -1, 0, 0, "", "", "Steal_Health_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Steal_Mana_Percent = new D3AttributeF(262, 0, -1, 0, 0, "", "", "Steal_Mana_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resource_On_Hit = new D3AttributeF(263, 0, 10, 0, 0, "", "", "Resource_On_Hit", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Resource_On_Kill = new D3AttributeF(264, 0, 10, 0, 0, "", "", "Resource_On_Kill", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Resource_On_Crit = new D3AttributeF(265, 0, 10, 0, 0, "", "", "Resource_On_Crit", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Hitpoints_On_Hit = new D3AttributeF(266, 0, -1, 0, 0, "", "", "Hitpoints_On_Hit", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Hitpoints_On_Kill = new D3AttributeF(267, 0, -1, 0, 0, "", "", "Hitpoints_On_Kill", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_To_Mana = new D3AttributeF(268, 0, -1, 0, 0, "", "", "Damage_To_Mana", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeI Last_Proc_Time = new D3AttributeI(269, 0, -1, 3, 1, "", "", "Last_Proc_Time", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeF Damage_Power_Delta = new D3AttributeF(270, 0, 0, 0, 0, "", "", "Damage_Power_Delta", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Power_Min = new D3AttributeF(271, 0, 0, 0, 0, "", "", "Damage_Power_Min", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeI Rope_Overlay = new D3AttributeI(272, -1, -1, 3, 1, "", "", "Rope_Overlay", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI General_Cooldown = new D3AttributeI(273, -1, -1, 3, 1, "", "", "General_Cooldown", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI Power_Cooldown = new D3AttributeI(274, -1, 4, 1, 1, "", "", "Power_Cooldown", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI Power_Cooldown_Start = new D3AttributeI(275, -1, 4, 1, 1, "", "", "Power_Cooldown_Start", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI Proc_Cooldown = new D3AttributeI(276, 0, 8, 1, 1, "", "", "Proc_Cooldown", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI Emote_Cooldown = new D3AttributeI(277, 0, -1, 1, 1, "", "", "Emote_Cooldown", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeF Projectile_Speed = new D3AttributeF(278, 0, -1, 0, 0, "", "", "Projectile_Speed", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeF Projectile_Speed_Increase_Percent = new D3AttributeF(279, 0, -1, 0, 0, "", "", "Projectile_Speed_Increase_Percent", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeB Destroy_When_Path_Blocked = new D3AttributeB(280, 0, -1, 1, 1, "", "", "Destroy When Path Blocked", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Skill_Toggled_State = new D3AttributeB(281, 0, 4, 1, 1, "", "", "Skill_Toggled_State", D3AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly D3AttributeI Act = new D3AttributeI(282, -1, -1, 3, 1, "", "", "Act", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Difficulty = new D3AttributeI(283, -1, -1, 3, 1, "", "", "Difficulty", D3AttributeEncoding.IntMinMax, 9, -1, 4, 3);
        public static readonly D3AttributeF Last_Damage_Amount = new D3AttributeF(284, -1, -1, 3, 0, "", "", "Last_Damage_Amount", D3AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly D3AttributeB In_Knockback = new D3AttributeB(285, 0, -1, 1, 1, "", "", "In_Knockback", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeF Amplify_Damage_Type_Percent = new D3AttributeF(286, 0, 0, 0, 0, "", "", "Amplify_Damage_Type_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Amplify_Damage_Percent = new D3AttributeF(287, 0, -1, 0, 0, "", "", "Amplify_Damage_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeI Durability_Cur = new D3AttributeI(288, 0, -1, 0, 1, "", "", "Durability_Cur", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeI Durability_Max = new D3AttributeI(289, 0, -1, 0, 1, "", "", "Durability_Max", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeI Durability_Last_Damage = new D3AttributeI(290, 0, -1, 0, 1, "", "", "Durability_Last_Damage", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Item_Quality_Level = new D3AttributeI(291, -1, -1, 1, 1, "", "", "Item_Quality_Level", D3AttributeEncoding.IntMinMax, 8, -1, 11, 4);
        public static readonly D3AttributeF Item_Cost_Percent_Bonus = new D3AttributeF(292, 0, -1, 0, 0, "", "", "Item_Cost_Percent_Bonus", D3AttributeEncoding.Float16, 8, 0, 0, 16);
        public static readonly D3AttributeB Item_Equipped = new D3AttributeB(293, 0, -1, 1, 1, "", "", "Item_Equipped", D3AttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly D3AttributeF Requirement = new D3AttributeF(294, 0, 1, 1, 0, "FLOOR(Requirement.Agg * (1 + Requirements_Ease_Percent#NONE))", "", "Requirement", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Requirements_Ease_Percent = new D3AttributeF(295, 0, -1, 0, 0, "", "0", "Requirements_Ease_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Requirement_When_Equipped = new D3AttributeF(296, 0, 1, 1, 0, "", "", "Requirement_When_Equipped", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeI Sockets = new D3AttributeI(297, 0, -1, 0, 1, "", "0", "Sockets", D3AttributeEncoding.IntMinMax, 8, 0, 3, 2);
        public static readonly D3AttributeI Sockets_Filled = new D3AttributeI(298, 0, -1, 0, 1, "", "0", "Sockets_Filled", D3AttributeEncoding.IntMinMax, 8, 0, 3, 2);
        public static readonly D3AttributeF Stats_All_Bonus = new D3AttributeF(299, 0, -1, 0, 0, "", "", "Stats_All_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeI Item_Bound_To_ACD = new D3AttributeI(300, -1, -1, 3, 1, "", "0", "Item_Bound_To_ACD", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeI Item_Locked_To_ACD = new D3AttributeI(301, -1, -1, 3, 1, "", "0", "Item_Locked_To_ACD", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeI Item_Binding_Level_Override = new D3AttributeI(302, 0, -1, 1, 1, "", "0", "Item_Binding_Level_Override", D3AttributeEncoding.IntMinMax, 8, 0, 5, 3);
        public static readonly D3AttributeI ItemStackQuantityHi = new D3AttributeI(303, 0, -1, 4, 1, "", "", "ItemStackQuantityHi", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeI ItemStackQuantityLo = new D3AttributeI(304, 0, -1, 4, 1, "", "", "ItemStackQuantityLo", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeF Run_Speed_Granted = new D3AttributeF(305, 0, -1, 0, 0, "", "", "Run_Speed_Granted", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeI Run_Speed_Duration = new D3AttributeI(306, 0, -1, 0, 1, "", "", "Run_Speed_Duration", D3AttributeEncoding.IntMinMax, 9, 0, 16777215, 24);
        public static readonly D3AttributeI IdentifyCost = new D3AttributeI(307, 0, -1, 0, 1, "", "", "IdentifyCost", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeI Seed = new D3AttributeI(308, 0, -1, 4, 1, "", "0", "Seed", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeB IsCrafted = new D3AttributeB(309, 0, -1, 4, 1, "", "0", "IsCrafted", D3AttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly D3AttributeI DyeType = new D3AttributeI(310, 0, -1, 1, 1, "", "0", "DyeType", D3AttributeEncoding.IntMinMax, 8, -1, 30, 5);
        public static readonly D3AttributeI EnchantAffix = new D3AttributeI(311, -1, -1, 3, 1, "", "0", "EnchantAffix", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeI EnchantRangeVal = new D3AttributeI(312, 0, -1, 4, 1, "", "0", "EnchantRangeVal", D3AttributeEncoding.IntMinMax, 8, 0, 255, 8);
        public static readonly D3AttributeI HighlySalvageable = new D3AttributeI(313, 0, -1, 1, 1, "", "0", "HighlySalvageable", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeI ItemUnlockTimeHi = new D3AttributeI(314, 0, -1, 4, 1, "", "", "ItemUnlockTimeHi", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeI ItemUnlockTimeLo = new D3AttributeI(315, 0, -1, 4, 1, "", "", "ItemUnlockTimeLo", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeB Always_Plays_GetHit = new D3AttributeB(316, 0, -1, 1, 1, "", "", "Always_Plays_GetHit", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Hidden = new D3AttributeB(317, 0, -1, 1, 1, "", "", "Hidden", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI RActor_Fade_Group = new D3AttributeI(318, -1, -1, 1, 1, "", "", "RActor_Fade_Group", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Quest_Range = new D3AttributeI(319, -1, -1, 3, 1, "", "", "Quest Range", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Attack_Cooldown_Min = new D3AttributeI(320, 0, -1, 0, 1, "", "", "Attack_Cooldown_Min", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeI Attack_Cooldown_Delta = new D3AttributeI(321, 0, -1, 0, 1, "", "", "Attack_Cooldown_Delta", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeI InitialCooldownMinTotal = new D3AttributeI(322, 0, -1, 0, 1, "", "InitialCooldownMin / Attacks_Per_Second_Total", "InitialCooldownMinTotal", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeI InitialCooldownDeltaTotal = new D3AttributeI(323, 0, -1, 0, 1, "", "InitialCooldownDelta / Attacks_Per_Second_Total", "InitialCooldownDeltaTotal", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeI Attack_Cooldown_Min_Total = new D3AttributeI(324, 0, -1, 0, 1, "", "Attack_Cooldown_Min / Attacks_Per_Second_Total", "Attack_Cooldown_Min_Total", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeI Attack_Cooldown_Delta_Total = new D3AttributeI(325, 0, -1, 0, 1, "", "Attack_Cooldown_Delta / Attacks_Per_Second_Total", "Attack_Cooldown_Delta_Total", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeI Closing_Cooldown_Min_Total = new D3AttributeI(326, 0, -1, 0, 1, "", "", "Closing_Cooldown_Min_Total", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeI Closing_Cooldown_Delta_Total = new D3AttributeI(327, 0, -1, 0, 1, "", "", "Closing_Cooldown_Delta_Total", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeB Quest_Monster = new D3AttributeB(328, 0, -1, 0, 1, "", "", "Quest_Monster", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Quest_Monster_Effect = new D3AttributeI(329, -1, -1, 3, 1, "", "", "Quest_Monster Effect", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Treasure_Class = new D3AttributeI(330, -1, -1, 3, 1, "", "", "Treasure_Class", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeB Removes_Body_On_Death = new D3AttributeB(331, 0, -1, 1, 1, "", "", "Removes_Body_On_Death", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeI InitialCooldownMin = new D3AttributeI(332, 0, -1, 0, 1, "", "", "InitialCooldownMin", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeI InitialCooldownDelta = new D3AttributeI(333, 0, -1, 0, 1, "", "", "InitialCooldownDelta", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeF Knockback_Weight = new D3AttributeF(334, 0, -1, 0, 0, "", "", "Knockback_Weight", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeB UntargetableByPets = new D3AttributeB(335, 0, -1, 1, 1, "", "", "UntargetableByPets", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeI Damage_State_Current = new D3AttributeI(336, 0, -1, 0, 1, "", "", "Damage_State_Current", D3AttributeEncoding.IntMinMax, 31, 0, 15, 4);
        public static readonly D3AttributeI Damage_State_Max = new D3AttributeI(337, 0, -1, 0, 1, "", "", "Damage_State_Max", D3AttributeEncoding.IntMinMax, 31, 0, 15, 4);
        public static readonly D3AttributeB Is_Player_Decoy = new D3AttributeB(338, 0, -1, 1, 1, "", "", "Is_Player_Decoy", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeF Custom_Target_Weight = new D3AttributeF(339, 0, 3, 0, 0, "", "", "Custom_Target_Weight", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeI Gizmo_State = new D3AttributeI(340, -1, -1, 3, 1, "", "", "Gizmo_State", D3AttributeEncoding.IntMinMax, 4, -1, 30, 5);
        public static readonly D3AttributeI Gizmo_Charges = new D3AttributeI(341, 0, -1, 1, 1, "", "", "Gizmo_Charges", D3AttributeEncoding.IntMinMax, 4, -1, 30, 5);
        public static readonly D3AttributeB Chest_Open = new D3AttributeB(342, 0, 3, 0, 1, "", "", "Chest_Open", D3AttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly D3AttributeB Door_Locked = new D3AttributeB(343, 0, -1, 1, 1, "", "", "Door_Locked", D3AttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly D3AttributeI Door_Timer = new D3AttributeI(344, -1, -1, 3, 1, "", "", "Door_Timer", D3AttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly D3AttributeB Gizmo_Disabled_By_Script = new D3AttributeB(345, 0, -1, 1, 1, "", "", "Gizmo_Disabled_By_Script", D3AttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly D3AttributeI Gizmo_Operator_ACDID = new D3AttributeI(346, -1, -1, 3, 1, "", "", "Gizmo_Operator_ACDID", D3AttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly D3AttributeI Triggering_Count = new D3AttributeI(347, 0, -1, 0, 1, "", "", "Triggering_Count", D3AttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly D3AttributeI Last_Altar_ANN = new D3AttributeI(348, -1, -1, 3, 1, "", "", "Last_Altar_ANN", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeB New_Skill_Since_Last_Altar = new D3AttributeB(349, 0, 3, 0, 1, "", "", "New_Skill_Since_Last_Altar", D3AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly D3AttributeF Gate_Position = new D3AttributeF(350, 0, -1, 0, 0, "", "", "Gate_Position", D3AttributeEncoding.Float16, 4, 0, 0, 16);
        public static readonly D3AttributeF Gate_Velocity = new D3AttributeF(351, 0, -1, 0, 0, "", "", "Gate_Velocity", D3AttributeEncoding.Float16, 4, 0, 0, 16);
        public static readonly D3AttributeB Gizmo_Has_Been_Operated = new D3AttributeB(352, 0, -1, 1, 1, "", "", "Gizmo_Has_Been_Operated", D3AttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly D3AttributeI Pet_Owner = new D3AttributeI(353, -1, -1, 3, 1, "", "", "Pet_Owner", D3AttributeEncoding.IntMinMax, 31, -1, 8, 4);
        public static readonly D3AttributeI Pet_Creator = new D3AttributeI(354, -1, -1, 3, 1, "", "", "Pet_Creator", D3AttributeEncoding.IntMinMax, 31, -1, 8, 4);
        public static readonly D3AttributeI Pet_Type = new D3AttributeI(355, -1, -1, 3, 1, "", "", "Pet_Type", D3AttributeEncoding.IntMinMax, 31, -1, 24, 5);
        public static readonly D3AttributeB DropsNoLoot = new D3AttributeB(356, 0, -1, 1, 1, "", "", "DropsNoLoot", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB GrantsNoXP = new D3AttributeB(357, 0, -1, 1, 1, "", "", "GrantsNoXP", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeI Hireling_Class = new D3AttributeI(358, 0, -1, 1, 1, "", "", "Hireling_Class", D3AttributeEncoding.IntMinMax, 31, 0, 4, 3);
        public static readonly D3AttributeI Summoned_By_SNO = new D3AttributeI(359, -1, -1, 3, 1, "", "", "Summoned_By_SNO", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeB Is_NPC = new D3AttributeB(360, 0, -1, 1, 1, "", "", "Is_NPC", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB NPC_Is_Operatable = new D3AttributeB(361, 0, -1, 1, 1, "", "", "NPC_Is_Operatable", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB NPC_Is_Escorting = new D3AttributeB(362, 0, -1, 1, 1, "", "", "NPC_Is_Escorting", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB NPC_Has_Interact_Options = new D3AttributeB(363, 0, 12, 1, 1, "", "", "NPC_Has_Interact_Options", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Conversation_Icon = new D3AttributeI(364, -1, 12, 3, 1, "", "", "Conversation_Icon", D3AttributeEncoding.IntMinMax, 31, -1, 6, 3);
        public static readonly D3AttributeI Callout_Cooldown = new D3AttributeI(365, -1, 16, 1, 1, "", "", "Callout_Cooldown", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Banter_Cooldown = new D3AttributeI(366, -1, 16, 1, 1, "", "", "Banter_Cooldown", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Conversation_Heard_Count = new D3AttributeI(367, 0, 16, 1, 1, "", "", "Conversation_Heard_Count", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Last_Tick_Shop_Entered = new D3AttributeI(368, -1, -1, 3, 1, "", "", "Last_Tick_Shop_Entered", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeB Is_Helper = new D3AttributeB(369, 0, -1, 1, 1, "", "", "Is_Helper", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeI Axe = new D3AttributeI(370, 0, -1, 0, 0, "", "", "Axe", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Axe2H = new D3AttributeI(371, 0, -1, 0, 0, "", "", "Axe2H", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI ThrowingAxe = new D3AttributeI(372, 0, -1, 0, 0, "", "", "ThrowingAxe", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI AxeAny = new D3AttributeI(373, 0, -1, 0, 0, "Pin(Axe + Axe2H + ThrowingAxe, 0, 1)", "Pin(Axe + Axe2H + ThrowingAxe, 0, 1)", "AxeAny", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Bow = new D3AttributeI(374, 0, -1, 0, 0, "", "", "Bow", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Crossbow = new D3AttributeI(375, 0, -1, 0, 0, "", "", "Crossbow", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI BowAny = new D3AttributeI(376, 0, -1, 0, 0, "Pin(Bow + Crossbow, 0, 1)", "Pin(Bow + Crossbow, 0, 1)", "BowAny", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Club = new D3AttributeI(377, 0, -1, 0, 0, "", "", "Club", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Club2H = new D3AttributeI(378, 0, -1, 0, 0, "", "", "Club2H", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI ClubAny = new D3AttributeI(379, 0, -1, 0, 0, "Pin(Club + Club2H, 0, 1)", "Pin(Club + Club2H, 0, 1)", "ClubAny", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Dagger = new D3AttributeI(380, 0, -1, 0, 0, "", "", "Dagger", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Mace = new D3AttributeI(381, 0, -1, 0, 0, "", "", "Mace", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Mace2H = new D3AttributeI(382, 0, -1, 0, 0, "", "", "Mace2H", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI MaceAny = new D3AttributeI(383, 0, -1, 0, 0, "Pin(Mace + Mace2H, 0, 1)", "Pin(Mace + Mace2H, 0, 1)", "MaceAny", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Sword = new D3AttributeI(384, 0, -1, 0, 0, "", "", "Sword", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Sword2H = new D3AttributeI(385, 0, -1, 0, 0, "", "", "Sword2H", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI SwordAny = new D3AttributeI(386, 0, -1, 0, 0, "Pin(Sword + Sword2H, 0, 1)", "Pin(Sword + Sword2H, 0, 1)", "SwordAny", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Polearm = new D3AttributeI(387, 0, -1, 0, 0, "", "", "Polearm", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Spear = new D3AttributeI(388, 0, -1, 0, 0, "", "", "Spear", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Wand = new D3AttributeI(389, 0, -1, 0, 0, "", "", "Wand", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI ColdStaff = new D3AttributeI(390, 0, -1, 0, 0, "", "", "ColdStaff", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI FireStaff = new D3AttributeI(391, 0, -1, 0, 0, "", "", "FireStaff", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI LightningStaff = new D3AttributeI(392, 0, -1, 0, 0, "", "", "LightningStaff", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI PoisonStaff = new D3AttributeI(393, 0, -1, 0, 0, "", "", "PoisonStaff", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI StaffAny = new D3AttributeI(394, 0, -1, 0, 0, "Pin(ColdStaff + FireStaff + LightningStaff + PoisonStaff, 0, 1)", "Pin(ColdStaff + FireStaff + LightningStaff + PoisonStaff, 0, 1)", "StaffAny", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Weapon1H = new D3AttributeI(395, 0, -1, 0, 0, "Pin(Axe + Club + Dagger + Mace + Sword + Wand, 0, 1)", "Pin(Axe + Club + Dagger + Mace + Sword + Wand, 0, 1)", "Weapon1H", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Weapon2H = new D3AttributeI(396, 0, -1, 0, 0, "Pin(Axe2H + BowAny + Club2H + Mace2H + Sword2H + Polearm + Spear + StaffAny, 0, 1)", "Pin(Axe2H + BowAny + Club2H + Mace2H + Sword2H + Polearm + Spear + StaffAny, 0, 1)", "Weapon2H", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI WeaponMelee = new D3AttributeI(397, 0, -1, 0, 0, "Pin(Axe + Axe2H + ClubAny + Dagger + MaceAny + SwordAny + Polearm + Spear + Wand + StaffAny, 0, 1)", "Pin(Axe + Axe2H + ClubAny + Dagger + MaceAny + SwordAny + Polearm + Spear + Wand + StaffAny, 0, 1)", "WeaponMelee", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI WeaponRanged = new D3AttributeI(398, 0, -1, 0, 0, "Pin(ThrowingAxe + BowAny, 0, 1)", "Pin(ThrowingAxe + BowAny, 0, 1)", "WeaponRanged", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Quiver = new D3AttributeI(399, 0, -1, 0, 0, "", "", "Quiver", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Reincarnation_Buff = new D3AttributeI(400, -1, -1, 3, 1, "", "", "Reincarnation_Buff", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Dead_Body_AnimTag = new D3AttributeI(401, -1, -1, 3, 1, "", "", "Dead_Body_AnimTag", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Spawned_by_ACDID = new D3AttributeI(402, -1, -1, 3, 1, "", "", "Spawned_by_ACDID", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Summoned_By_ACDID = new D3AttributeI(403, -1, -1, 3, 1, "", "", "Summoned_By_ACDID", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Summoner_ID = new D3AttributeI(404, -1, -1, 3, 1, "", "", "Summoner_ID", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Banner_ACDID = new D3AttributeI(405, -1, -1, 3, 1, "", "", "Banner_ACDID", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeF Breakable_Shield_HP = new D3AttributeF(406, 0, -1, 0, 0, "", "", "Breakable_Shield_HP", D3AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly D3AttributeI Current_WeaponClass = new D3AttributeI(407, -1, -1, 3, 1, "", "", "Current_WeaponClass", D3AttributeEncoding.IntMinMax, 31, -1, 19, 5);
        public static readonly D3AttributeB Weapons_Sheathed = new D3AttributeB(408, 0, -1, 1, 1, "", "", "Weapons_Sheathed", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Held_In_OffHand = new D3AttributeB(409, 0, -1, 1, 1, "", "0", "Held_In_OffHand", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeF Attacks_Per_Second_Item_MainHand = new D3AttributeF(410, 0, -1, 0, 0, "(Held_In_OffHand ? 0 : Attacks_Per_Second_Item_Subtotal )", "", "Attacks_Per_Second_Item_MainHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attacks_Per_Second_Item_OffHand = new D3AttributeF(411, 0, -1, 0, 0, "(Held_In_OffHand ? Attacks_Per_Second_Item_Subtotal : 0)", "", "Attacks_Per_Second_Item_OffHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attacks_Per_Second_Item_Total_MainHand = new D3AttributeF(412, 0, -1, 0, 0, "Attacks_Per_Second_Item_MainHand + Attacks_Per_Second_Item_Bonus", "", "Attacks_Per_Second_Item_Total_MainHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Attacks_Per_Second_Item_Total_OffHand = new D3AttributeF(413, 0, -1, 0, 0, "Attacks_Per_Second_Item_OffHand + Attacks_Per_Second_Item_Bonus", "", "Attacks_Per_Second_Item_Total_OffHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Weapon_Min_Total_MainHand = new D3AttributeF(414, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? 0 : Damage_Weapon_Min_Total )", "", "Damage_Weapon_Min_Total_MainHand", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Min_Total_OffHand = new D3AttributeF(415, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? Damage_Weapon_Min_Total : 0)", "", "Damage_Weapon_Min_Total_OffHand", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Delta_Total_MainHand = new D3AttributeF(416, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? 0 : Damage_Weapon_Delta_Total )", "", "Damage_Weapon_Delta_Total_MainHand", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Delta_Total_OffHand = new D3AttributeF(417, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? Damage_Weapon_Delta_Total : 0)", "", "Damage_Weapon_Delta_Total_OffHand", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Attacks_Per_Second_Item_CurrentHand = new D3AttributeF(418, 0, -1, 0, 0, "", "(DualWield_Hand ? Attacks_Per_Second_Item_OffHand : Attacks_Per_Second_Item_MainHand)", "Attacks_Per_Second_Item_CurrentHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Weapon_Min_Total_CurrentHand = new D3AttributeF(419, 0, 0, 0, 0, "", "(DualWield_Hand#NONE ? Damage_Weapon_Min_Total_OffHand : Damage_Weapon_Min_Total_MainHand)", "Damage_Weapon_Min_Total_CurrentHand", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeF Damage_Weapon_Delta_Total_CurrentHand = new D3AttributeF(420, 0, 0, 0, 0, "", "(DualWield_Hand#NONE ? Damage_Weapon_Delta_Total_OffHand : Damage_Weapon_Delta_Total_MainHand)", "Damage_Weapon_Delta_Total_CurrentHand", D3AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly D3AttributeI Has_Special_Death_AnimTag = new D3AttributeI(421, -1, -1, 1, 1, "", "", "Has_Special_Death_AnimTag", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Death_Type_Override = new D3AttributeI(422, -1, -1, 3, 1, "", "", "Death_Type_Override", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeB In_Combat = new D3AttributeB(423, 0, -1, 1, 1, "", "", "In_Combat", D3AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly D3AttributeB In_Conversation = new D3AttributeB(424, 0, -1, 3, 1, "", "", "In_Conversation", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Last_Tick_Potion_Used = new D3AttributeI(425, -1, -1, 3, 1, "", "", "Last_Tick_Potion_Used", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeF Potion_Dilution_Percent = new D3AttributeF(426, 0, -1, 0, 0, "", "", "Potion_Dilution_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Out_Of_Combat_Health_Regen_Percent = new D3AttributeF(427, 0, -1, 0, 0, "", "", "Out_Of_Combat_Health_Regen_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Out_Of_Combat_Mana_Regen_Percent = new D3AttributeF(428, 0, -1, 0, 0, "", "", "Out_Of_Combat_Mana_Regen_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeI Potion_Dilution_Duration = new D3AttributeI(429, -1, -1, 3, 1, "", "", "Potion_Dilution_Duration", D3AttributeEncoding.IntMinMax, 0, -1, 16777214, 24);
        public static readonly D3AttributeF Potion_Dilution_Scalar = new D3AttributeF(430, 0, -1, 0, 0, "", "", "Potion_Dilution_Scalar", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeB Feared = new D3AttributeB(431, 0, -1, 1, 1, "", "", "Feared", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Fear_Immune = new D3AttributeB(432, 0, -1, 1, 1, "", "", "Fear_Immune", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeI Last_Damage_ACD = new D3AttributeI(433, -1, -1, 3, 1, "", "", "Last_Damage_ACD", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Attached_To_ACD = new D3AttributeI(434, -1, -1, 3, 1, "", "", "Attached_To_ACD", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Attachment_ACD = new D3AttributeI(435, -1, -1, 3, 1, "", "", "Attachment_ACD", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Normal_Attack_Replacement_Power_SNO = new D3AttributeI(436, -1, -1, 3, 1, "", "", "Normal_Attack_Replacement_Power_SNO", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeF Damage_Type_Override = new D3AttributeF(437, 0, 0, 0, 0, "", "", "Damage_Type_Override", D3AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly D3AttributeF Minion_Count_Bonus_Percent = new D3AttributeF(438, 0, -1, 0, 0, "", "", "Minion_Count_Bonus_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeI Champion_Teleport_Next_Tick = new D3AttributeI(439, 0, -1, 0, 1, "", "", "Champion_Teleport_Next_Tick", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeF Champion_Teleport_Time_Min_In_Seconds = new D3AttributeF(440, 0, -1, 0, 0, "", "", "Champion_Teleport_Time_Min_In_Seconds", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Champion_Teleport_Time_Delta_In_Seconds = new D3AttributeF(441, 0, -1, 0, 0, "", "", "Champion_Teleport_Time_Delta_In_Seconds", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeI Champion_Clone_Next_Tick = new D3AttributeI(442, 0, -1, 0, 1, "", "", "Champion_Clone_Next_Tick", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeF Champion_Clone_Time_Min_In_Seconds = new D3AttributeF(443, 0, -1, 0, 0, "", "", "Champion_Clone_Time_Min_In_Seconds", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Champion_Clone_Time_Delta_In_Seconds = new D3AttributeF(444, 0, -1, 0, 0, "", "", "Champion_Clone_Time_Delta_In_Seconds", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Champion_Clone_Hitpoint_Bonus_Percent = new D3AttributeF(445, 0, -1, 0, 0, "", "", "Champion_Clone_Hitpoint_Bonus_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Champion_Clone_Damage_Bonus_Percent = new D3AttributeF(446, 0, -1, 0, 0, "", "", "Champion_Clone_Damage_Bonus_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeI Champion_Ghostly_Next_Tick = new D3AttributeI(447, 0, -1, 0, 1, "", "", "Champion_Ghostly_Next_Tick", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeF Champion_Ghostly_Inactive_Time_Min_In_Seconds = new D3AttributeF(448, 0, -1, 0, 0, "", "", "Champion_Ghostly_Inactive_Time_Min_In_Seconds", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Champion_Ghostly_Inactive_Time_Delta_In_Seconds = new D3AttributeF(449, 0, -1, 0, 0, "", "", "Champion_Ghostly_Inactive_Time_Delta_In_Seconds", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Champion_Ghostly_Active_Time_Min_In_Seconds = new D3AttributeF(450, 0, -1, 0, 0, "", "", "Champion_Ghostly_Active_Time_Min_In_Seconds", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Champion_Ghostly_Active_Time_Delta_In_Seconds = new D3AttributeF(451, 0, -1, 0, 0, "", "", "Champion_Ghostly_Active_Time_Delta_In_Seconds", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Champion_Ghostly_Saved_Dodge_Chance = new D3AttributeF(452, 0, -1, 0, 0, "", "", "Champion_Ghostly_Saved_Dodge_Chance", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeB Champion_Ghostly = new D3AttributeB(453, 0, -1, 1, 1, "", "", "Champion_Ghostly", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Base_Element = new D3AttributeI(454, -1, -1, 1, 1, "", "", "Base_Element", D3AttributeEncoding.IntMinMax, 0, -1, 7, 4);
        public static readonly D3AttributeF Projectile_Amount_Bonus_Percent = new D3AttributeF(455, 0, -1, 0, 0, "", "", "Projectile_Amount_Bonus_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Projectile_Reflect_Chance = new D3AttributeF(456, 0, 0, 0, 0, "", "", "Projectile_Reflect_Chance", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Attack_Fear_Chance = new D3AttributeF(457, 0, -1, 0, 0, "", "", "Attack_Fear_Chance", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Attack_Fear_Time_Min = new D3AttributeF(458, 0, -1, 0, 0, "", "", "Attack_Fear_Time_Min", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Attack_Fear_Time_Delta = new D3AttributeF(459, 0, -1, 0, 0, "", "", "Attack_Fear_Time_Delta", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeB Buff_Visual_Effect = new D3AttributeB(460, 0, 9, 1, 1, "", "", "Buff_Visual_Effect", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Buff_Icon_Start_Tick0 = new D3AttributeI(461, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick0", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_Start_Tick1 = new D3AttributeI(462, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick1", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_Start_Tick2 = new D3AttributeI(463, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick2", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_Start_Tick3 = new D3AttributeI(464, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick3", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_Start_Tick4 = new D3AttributeI(465, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick4", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_Start_Tick5 = new D3AttributeI(466, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick5", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_Start_Tick6 = new D3AttributeI(467, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick6", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_Start_Tick7 = new D3AttributeI(468, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick7", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_End_Tick0 = new D3AttributeI(469, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick0", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_End_Tick1 = new D3AttributeI(470, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick1", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_End_Tick2 = new D3AttributeI(471, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick2", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_End_Tick3 = new D3AttributeI(472, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick3", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_End_Tick4 = new D3AttributeI(473, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick4", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_End_Tick5 = new D3AttributeI(474, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick5", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_End_Tick6 = new D3AttributeI(475, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick6", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Buff_Icon_End_Tick7 = new D3AttributeI(476, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick7", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeB Could_Have_Ragdolled = new D3AttributeB(477, 0, -1, 1, 1, "", "", "Could_Have_Ragdolled", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Ambient_Damage_Effect_Last_Time = new D3AttributeI(478, 0, -1, 1, 1, "", "", "Ambient_Damage_Effect_Last_Time", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeF Scale_Bonus = new D3AttributeF(479, 0, -1, 0, 0, "", "", "Scale_Bonus", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeB Deleted_On_Server = new D3AttributeB(480, 0, -1, 1, 1, "", "", "Deleted_On_Server", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Scripted_Fade_Time = new D3AttributeI(481, 0, -1, 1, 1, "", "", "Scripted_Fade_Time", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeB Does_No_Damage = new D3AttributeB(482, 0, -1, 1, 1, "", "", "Does_No_Damage", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Does_Fake_Damage = new D3AttributeB(483, 0, -1, 1, 1, "", "", "Does_Fake_Damage", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeF SlowTime_Debuff = new D3AttributeF(484, 0, -1, 0, 0, "", "", "SlowTime_Debuff", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeB Blocks_Projectiles = new D3AttributeB(485, 0, -1, 1, 1, "", "", "Blocks_Projectiles", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Frozen = new D3AttributeB(486, 0, -1, 1, 1, "", "", "Frozen", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeF Freeze_Damage_Percent_Bonus = new D3AttributeF(487, 0, -1, 0, 0, "", "", "Freeze_Damage_Percent_Bonus", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeB Buff_Active = new D3AttributeB(488, 0, 4, 1, 1, "", "", "Buff_Active", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeF DualWield_BothAttack_Chance = new D3AttributeF(489, 0, -1, 0, 0, "", "", "DualWield_BothAttack_Chance", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeI Summon_Expiration_Tick = new D3AttributeI(490, 0, -1, 0, 1, "", "", "Summon_Expiration_Tick", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Summon_Count = new D3AttributeI(491, 0, -1, 0, 1, "", "", "Summon_Count", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeB Uninterruptible = new D3AttributeB(492, 0, -1, 1, 1, "", "", "Uninterruptible", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Queue_Death = new D3AttributeB(493, 0, -1, 1, 1, "", "", "Queue Death", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB CantStartDisplayedPowers = new D3AttributeB(494, 0, -1, 1, 1, "", "", "CantStartDisplayedPowers", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Wizard_Slowtime_Proxy_ACD = new D3AttributeI(495, -1, -1, 3, 1, "", "", "Wizard_Slowtime_Proxy_ACD", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeF DPS = new D3AttributeF(496, 0, -1, 1, 0, "", "", "DPS", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeI Resurrection_Power = new D3AttributeI(497, -1, -1, 3, 1, "", "", "Resurrection_Power", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeF Freeze_Damage = new D3AttributeF(498, 0, -1, 1, 0, "", "", "Freeze_Damage", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeF Freeze_Capacity = new D3AttributeF(499, 0, -1, 0, 0, "", "", "Freeze_Capacity", D3AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly D3AttributeF Thaw_Rate = new D3AttributeF(500, 0, -1, 0, 0, "", "", "Thaw_Rate", D3AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly D3AttributeF Chilled_Dur_Bonus_Percent = new D3AttributeF(501, 0, -1, 0, 0, "", "", "Chilled_Dur_Bonus_Percent", D3AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly D3AttributeF DOT_DPS = new D3AttributeF(502, 0, -1, 0, 0, "", "", "DOT_DPS", D3AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly D3AttributeF DamageCap_Percent = new D3AttributeF(503, 0, -1, 1, 0, "", "", "DamageCap_Percent", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeI Item_Time_Sold = new D3AttributeI(504, 0, -1, 1, 1, "", "", "Item_Time_Sold", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeI Forced_Hireling_Power = new D3AttributeI(505, -1, -1, 3, 1, "", "", "Forced_Hireling_Power", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeB IsRooted = new D3AttributeB(506, 0, -1, 1, 1, "", "", "IsRooted", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI RootTargetACD = new D3AttributeI(507, -1, -1, 3, 1, "", "", "RootTargetACD", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeF RootAutoDecayPerSecond = new D3AttributeF(508, 0, -1, 1, 0, "", "", "RootAutoDecayPerSecond", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeF RootUnitValue = new D3AttributeF(509, 0, -1, 1, 0, "", "", "RootUnitValue", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeI RootTotalTicks = new D3AttributeI(510, 0, -1, 1, 1, "", "", "RootTotalTicks", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeB Hide_Affixes = new D3AttributeB(511, 0, -1, 1, 1, "", "", "Hide_Affixes", D3AttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly D3AttributeI Skill_Socket_Bonus = new D3AttributeI(512, 0, -1, 1, 1, "", "", "Skill_Socket_Bonus", D3AttributeEncoding.IntMinMax, 8, 0, 31, 5);
        public static readonly D3AttributeI Rune_Rank = new D3AttributeI(513, 0, 11, 0, 1, "", "", "Rune_Rank", D3AttributeEncoding.IntMinMax, 8, 0, 255, 8);
        public static readonly D3AttributeI Rune_Attuned_Power = new D3AttributeI(514, -1, -1, 1, 1, "", "", "Rune_Attuned_Power", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeI Rune_A = new D3AttributeI(515, 0, 11, 0, 1, "", "", "Rune_A", D3AttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly D3AttributeI Rune_B = new D3AttributeI(516, 0, 11, 0, 1, "", "", "Rune_B", D3AttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly D3AttributeI Rune_C = new D3AttributeI(517, 0, 11, 0, 1, "", "", "Rune_C", D3AttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly D3AttributeI Rune_D = new D3AttributeI(518, 0, 11, 0, 1, "", "", "Rune_D", D3AttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly D3AttributeI Rune_E = new D3AttributeI(519, 0, 11, 0, 1, "", "", "Rune_E", D3AttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly D3AttributeF Resistance_Stun = new D3AttributeF(520, 0, -1, 0, 0, "", "", "Resistance_Stun", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resistance_Stun_Total = new D3AttributeF(521, 0, -1, 0, 0, "", "Resistance_Stun + Resistance_StunRootFreeze", "Resistance_Stun_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resistance_Root = new D3AttributeF(522, 0, -1, 0, 0, "", "", "Resistance_Root", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resistance_Root_Total = new D3AttributeF(523, 0, -1, 0, 0, "", "Resistance_Root + Resistance_StunRootFreeze", "Resistance_Root_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resistance_Freeze = new D3AttributeF(524, 0, -1, 0, 0, "", "", "Resistance_Freeze", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resistance_Freeze_Total = new D3AttributeF(525, 0, -1, 0, 0, "", "Resistance_Freeze + Resistance_StunRootFreeze", "Resistance_Freeze_Total", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resistance_StunRootFreeze = new D3AttributeF(526, 0, -1, 0, 0, "", "", "Resistance_StunRootFreeze", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF CrowdControl_Reduction = new D3AttributeF(527, 0, -1, 7, 0, "", "", "CrowdControl_Reduction", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeB Displays_Team_Effect = new D3AttributeB(528, 0, -1, 1, 1, "", "", "Displays_Team_Effect", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Cannot_Be_Added_To_AI_Target_List = new D3AttributeB(529, 0, -1, 1, 1, "", "", "Cannot_Be_Added_To_AI_Target_List", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeI SkillKit = new D3AttributeI(530, -1, -1, 3, 1, "", "", "SkillKit", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeB Immune_To_Charm = new D3AttributeB(531, 0, -1, 1, 1, "", "", "Immune_To_Charm", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Immune_To_Blind = new D3AttributeB(532, 0, -1, 1, 1, "", "", "Immune_To_Blind", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Damage_Shield = new D3AttributeB(533, 0, -1, 1, 1, "", "", "Damage_Shield", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Silenced = new D3AttributeB(534, 0, -1, 1, 1, "", "", "Silenced", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Diseased = new D3AttributeB(535, 0, -1, 1, 1, "", "", "Diseased", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Guard_Object_ACDID = new D3AttributeI(536, -1, -1, 3, 1, "", "", "Guard_Object_ACDID", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Follow_Target_ACDID = new D3AttributeI(537, -1, -1, 3, 1, "", "", "Follow_Target_ACDID", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Follow_Target_Type = new D3AttributeI(538, 0, -1, 3, 1, "", "", "Follow_Target_Type", D3AttributeEncoding.IntMinMax, 0, 0, 2, 2);
        public static readonly D3AttributeI Forced_Enemy_ACDID = new D3AttributeI(539, -1, -1, 1, 1, "", "", "Forced_Enemy_ACDID", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI NPC_Talk_Target_ANN = new D3AttributeI(540, -1, -1, 3, 1, "", "", "NPC_Talk_Target_ANN", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI NPC_Conv_Target_ANN = new D3AttributeI(541, -1, -1, 3, 1, "", "", "NPC_Conv_Target_ANN", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Script_Target_ACDID = new D3AttributeI(542, -1, 3, 3, 1, "", "", "Script_Target_ACDID", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Look_Target_Server_ANN = new D3AttributeI(543, -1, -1, 1, 1, "", "", "Look_Target_Server_ANN", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeF Look_Target_Broadcast_Intensity = new D3AttributeF(544, 0, -1, 0, 0, "", "", "Look_Target_Broadcast_Intensity", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeF Look_Target_Broadcast_Radius = new D3AttributeF(545, 0, -1, 0, 0, "", "", "Look_Target_Broadcast_Radius", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeB Stealthed = new D3AttributeB(546, 0, -1, 1, 1, "", "", "Stealthed", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI GemQuality = new D3AttributeI(547, 0, -1, 4, 1, "", "", "GemQuality", D3AttributeEncoding.IntMinMax, 8, 0, 14, 4);
        public static readonly D3AttributeI ItemBuffIcon = new D3AttributeI(548, 0, 4, 1, 1, "", "0", "ItemBuffIcon", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeF ScrollDuration = new D3AttributeF(549, 0, -1, 1, 0, "", "0", "ScrollDuration", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeI Gizmo_Actor_SNO_To_Spawn = new D3AttributeI(550, -1, -1, 3, 1, "", "", "Gizmo_Actor_SNO_To_Spawn", D3AttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly D3AttributeF Gizmo_Actor_To_Spawn_Scale = new D3AttributeF(551, 0, -1, 1, 0, "", "", "Gizmo_Actor_To_Spawn_Scale", D3AttributeEncoding.Float16, 4, 0, 0, 16);
        public static readonly D3AttributeI Death_Replacement_Power_SNO = new D3AttributeI(552, -1, -1, 3, 1, "", "", "Death_Replacement_Power_SNO", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeB Attachment_Handled_By_Client = new D3AttributeB(553, 0, -1, 1, 1, "", "", "Attachment_Handled_By_Client", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB AI_In_Special_State = new D3AttributeB(554, 0, -1, 1, 1, "", "", "AI_In_Special_State", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB AI_Used_Scripted_Spawn_Anim = new D3AttributeB(555, 0, -1, 1, 1, "", "", "AI_Used_Scripted_Spawn_Anim", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB AI_Spawned_By_Inactive_Marker = new D3AttributeB(556, 0, -1, 1, 1, "", "", "AI_Spawned_By_Inactive_Marker", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeI Headstone_Player_ANN = new D3AttributeI(557, -1, -1, 3, 1, "", "", "Headstone_Player_ANN", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeF Resource_Cost_Reduction_Percent = new D3AttributeF(558, 0, 10, 0, 0, "", "", "Resource_Cost_Reduction_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Resistance_Penetration = new D3AttributeF(559, 0, 0, 0, 0, "", "", "Resistance_Penetration", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Resistance_Penetration_Total = new D3AttributeF(560, 0, 0, 0, 0, "", "(Resistance_Penetration + Resistance_Penetration_All#NONE) * (Resistance_Penetration_Percent_All#NONE + 1)", "Resistance_Penetration_Total", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Resistance_Penetration_All = new D3AttributeF(561, 0, -1, 0, 0, "", "", "Resistance_Penetration_All", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Resistance_Penetration_Percent_All = new D3AttributeF(562, 0, -1, 0, 0, "", "", "Resistance_Penetration_Percent_All", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeI Fury_Effect_Level = new D3AttributeI(563, 0, -1, 0, 1, "", "", "Fury_Effect_Level", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeF Health_Potion_Bonus_Heal_Percent = new D3AttributeF(564, 0, -1, 0, 0, "", "", "Health_Potion_Bonus_Heal_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeI Free_Cast = new D3AttributeI(565, 0, 4, 1, 1, "", "", "Free_Cast", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeB Free_Cast_All = new D3AttributeB(566, 0, -1, 1, 1, "", "", "Free_Cast_All", D3AttributeEncoding.IntMinMax, 9, 0, 1, 1);
        public static readonly D3AttributeF Movement_Scalar_Reduction_Percent = new D3AttributeF(567, 0, -1, 1, 0, "", "", "Movement_Scalar_Reduction_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Movement_Scalar_Reduction_Resistance = new D3AttributeF(568, 0, -1, 0, 0, "", "", "Movement_Scalar_Reduction_Resistance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Absorb_Percent_All = new D3AttributeF(569, 0, -1, 0, 0, "", "", "Damage_Absorb_Percent_All", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeI World_Seed = new D3AttributeI(570, 0, -1, 0, 1, "", "", "World_Seed", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI Kill_Count_Record = new D3AttributeI(571, 0, -1, 1, 1, "", "", "Kill_Count_Record", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeI Object_Destruction_Record = new D3AttributeI(572, 0, -1, 1, 1, "", "", "Object_Destruction_Record", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeI Single_Attack_Record = new D3AttributeI(573, 0, -1, 1, 1, "", "", "Single_Attack_Record", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeI Environment_Attack_Record = new D3AttributeI(574, 0, -1, 1, 1, "", "", "Environment_Attack_Record", D3AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly D3AttributeB Root_Immune = new D3AttributeB(575, 0, -1, 1, 1, "", "", "Root_Immune", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeF Monster_Play_Get_Hit_Bonus = new D3AttributeF(576, 0, -1, 0, 0, "", "", "Monster_Play_Get_Hit_Bonus", D3AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly D3AttributeI Stored_Contact_Frame = new D3AttributeI(577, 0, -1, 1, 1, "", "", "Stored_Contact_Frame", D3AttributeEncoding.IntMinMax, 0, 0, 4, 3);
        public static readonly D3AttributeI Buff_Icon_Count0 = new D3AttributeI(578, 0, 4, 0, 1, "", "", "Buff_Icon_Count0", D3AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly D3AttributeI Buff_Icon_Count1 = new D3AttributeI(579, 0, 4, 0, 1, "", "", "Buff_Icon_Count1", D3AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly D3AttributeI Buff_Icon_Count2 = new D3AttributeI(580, 0, 4, 0, 1, "", "", "Buff_Icon_Count2", D3AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly D3AttributeI Buff_Icon_Count3 = new D3AttributeI(581, 0, 4, 0, 1, "", "", "Buff_Icon_Count3", D3AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly D3AttributeI Buff_Icon_Count4 = new D3AttributeI(582, 0, 4, 0, 1, "", "", "Buff_Icon_Count4", D3AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly D3AttributeI Buff_Icon_Count5 = new D3AttributeI(583, 0, 4, 0, 1, "", "", "Buff_Icon_Count5", D3AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly D3AttributeI Buff_Icon_Count6 = new D3AttributeI(584, 0, 4, 0, 1, "", "", "Buff_Icon_Count6", D3AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly D3AttributeI Buff_Icon_Count7 = new D3AttributeI(585, 0, 4, 0, 1, "", "", "Buff_Icon_Count7", D3AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly D3AttributeB Observer = new D3AttributeB(586, 0, -1, 1, 1, "", "", "Observer", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Resurrect_As_Observer = new D3AttributeB(587, 0, -1, 1, 1, "", "", "Resurrect_As_Observer", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeI Combo_Level = new D3AttributeI(588, 0, -1, 1, 1, "", "", "Combo_Level", D3AttributeEncoding.IntMinMax, 0, 0, 3, 2);
        public static readonly D3AttributeI Combo_Time_Last_Move = new D3AttributeI(589, 0, -1, 1, 1, "", "", "Combo_Time_Last_Move", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeB Burrowed = new D3AttributeB(590, 0, -1, 1, 1, "", "", "Burrowed", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Death_Replacement_Effect_Group_SNO = new D3AttributeI(591, -1, -1, 3, 1, "", "", "Death_Replacement_Effect_Group_SNO", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Checkpoint_Resurrection_Allowed_Game_Time = new D3AttributeI(592, 0, -1, 0, 1, "", "", "Checkpoint_Resurrection_Allowed_Game_Time", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Checkpoint_Resurrection_Forced_Game_Time = new D3AttributeI(593, 0, -1, 0, 1, "", "", "Checkpoint_Resurrection_Forced_Game_Time", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Controlling_TimedEvent_SNO = new D3AttributeI(594, -1, -1, 3, 1, "", "", "Controlling_TimedEvent_SNO", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeF Casting_Speed_Percent = new D3AttributeF(595, 0, -1, 0, 0, "", "", "Casting_Speed_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeB Using_Bossbar = new D3AttributeB(596, 0, -1, 1, 1, "", "", "Using_Bossbar", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_0_Visual_Effect = new D3AttributeB(597, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_1_Visual_Effect = new D3AttributeB(598, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_2_Visual_Effect = new D3AttributeB(599, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_3_Visual_Effect = new D3AttributeB(600, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_4_Visual_Effect = new D3AttributeB(601, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_5_Visual_Effect = new D3AttributeB(602, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_6_Visual_Effect = new D3AttributeB(603, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_7_Visual_Effect = new D3AttributeB(604, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Store_SNO = new D3AttributeI(605, 0, 0, 3, 1, "", "", "Store SNO", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeB Busy = new D3AttributeB(606, 0, -1, 1, 1, "", "", "Busy", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Afk = new D3AttributeB(607, 0, -1, 1, 1, "", "", "Afk", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Last_Action_Timestamp = new D3AttributeI(608, 0, -1, 1, 1, "", "", "Last Action Timestamp", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Portal_Next_Time = new D3AttributeI(609, 0, -1, 1, 1, "", "", "Portal Next Time", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeF Repair_Discount_Percent = new D3AttributeF(610, 0, -1, 0, 0, "", "", "Repair_Discount_Percent", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeB Resource_Degeneration_Prevented = new D3AttributeB(611, 0, -1, 1, 1, "", "", "Resource_Degeneration_Prevented", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Operatable = new D3AttributeB(612, 0, -1, 4, 1, "", "", "Operatable", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Look_Override = new D3AttributeI(613, 0, -1, 0, 1, "", "", "Look_Override", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Spawner_Concurrent_Count_ID = new D3AttributeI(614, -1, -1, 3, 1, "", "", "Spawner_Concurrent_Count_ID", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeB Disabled = new D3AttributeB(615, 0, -1, 1, 1, "", "", "Disabled", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Skill_Override = new D3AttributeI(616, -1, 3, 1, 1, "", "", "Skill_Override", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeB Skill_Override_Active = new D3AttributeB(617, 0, -1, 1, 1, "", "", "Skill_Override_Active", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Skill_Override_Ended = new D3AttributeB(618, 0, 4, 1, 1, "", "", "Skill_Override_Ended", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Skill_Override_Ended_Active = new D3AttributeB(619, 0, -1, 1, 1, "", "", "Skill_Override_Ended_Active", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Is_Power_Proxy = new D3AttributeB(620, 0, -1, 1, 1, "", "", "Is_Power_Proxy", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Force_No_Death_Animation = new D3AttributeB(621, 0, -1, 1, 1, "", "", "Force_No_Death_Animation", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeI Player_WeaponClass_Anim_Override = new D3AttributeI(622, -1, -1, 1, 1, "", "", "Player_WeaponClass_Anim_Override", D3AttributeEncoding.IntMinMax, 31, -1, 19, 5);
        public static readonly D3AttributeB Operatable_Story_Gizmo = new D3AttributeB(623, 0, -1, 1, 1, "", "", "Operatable_Story_Gizmo", D3AttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_0_Visual_Effect_None = new D3AttributeB(624, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_None", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_0_Visual_Effect_A = new D3AttributeB(625, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_A", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_0_Visual_Effect_B = new D3AttributeB(626, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_B", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_0_Visual_Effect_C = new D3AttributeB(627, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_C", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_0_Visual_Effect_D = new D3AttributeB(628, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_D", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_0_Visual_Effect_E = new D3AttributeB(629, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_E", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_1_Visual_Effect_None = new D3AttributeB(630, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_None", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_1_Visual_Effect_A = new D3AttributeB(631, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_A", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_1_Visual_Effect_B = new D3AttributeB(632, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_B", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_1_Visual_Effect_C = new D3AttributeB(633, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_C", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_1_Visual_Effect_D = new D3AttributeB(634, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_D", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_1_Visual_Effect_E = new D3AttributeB(635, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_E", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_2_Visual_Effect_None = new D3AttributeB(636, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_None", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_2_Visual_Effect_A = new D3AttributeB(637, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_A", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_2_Visual_Effect_B = new D3AttributeB(638, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_B", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_2_Visual_Effect_C = new D3AttributeB(639, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_C", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_2_Visual_Effect_D = new D3AttributeB(640, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_D", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_2_Visual_Effect_E = new D3AttributeB(641, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_E", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_3_Visual_Effect_None = new D3AttributeB(642, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_None", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_3_Visual_Effect_A = new D3AttributeB(643, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_A", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_3_Visual_Effect_B = new D3AttributeB(644, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_B", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_3_Visual_Effect_C = new D3AttributeB(645, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_C", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_3_Visual_Effect_D = new D3AttributeB(646, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_D", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_3_Visual_Effect_E = new D3AttributeB(647, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_E", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_4_Visual_Effect_None = new D3AttributeB(648, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_None", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_4_Visual_Effect_A = new D3AttributeB(649, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_A", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_4_Visual_Effect_B = new D3AttributeB(650, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_B", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_4_Visual_Effect_C = new D3AttributeB(651, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_C", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_4_Visual_Effect_D = new D3AttributeB(652, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_D", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_4_Visual_Effect_E = new D3AttributeB(653, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_E", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_5_Visual_Effect_None = new D3AttributeB(654, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_None", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_5_Visual_Effect_A = new D3AttributeB(655, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_A", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_5_Visual_Effect_B = new D3AttributeB(656, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_B", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_5_Visual_Effect_C = new D3AttributeB(657, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_C", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_5_Visual_Effect_D = new D3AttributeB(658, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_D", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_5_Visual_Effect_E = new D3AttributeB(659, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_E", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_6_Visual_Effect_None = new D3AttributeB(660, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_None", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_6_Visual_Effect_A = new D3AttributeB(661, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_A", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_6_Visual_Effect_B = new D3AttributeB(662, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_B", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_6_Visual_Effect_C = new D3AttributeB(663, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_C", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_6_Visual_Effect_D = new D3AttributeB(664, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_D", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_6_Visual_Effect_E = new D3AttributeB(665, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_E", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_7_Visual_Effect_None = new D3AttributeB(666, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_None", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_7_Visual_Effect_A = new D3AttributeB(667, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_A", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_7_Visual_Effect_B = new D3AttributeB(668, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_B", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_7_Visual_Effect_C = new D3AttributeB(669, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_C", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_7_Visual_Effect_D = new D3AttributeB(670, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_D", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Power_Buff_7_Visual_Effect_E = new D3AttributeB(671, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_E", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Walk_Passability_Power_SNO = new D3AttributeI(672, -1, -1, 1, 1, "", "", "Walk_Passability_Power_SNO", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Passability_Power_SNO = new D3AttributeI(673, -1, -1, 1, 1, "", "", "Passability_Power_SNO", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Flippy_ID = new D3AttributeI(674, -1, -1, 3, 1, "", "", "Flippy_ID", D3AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly D3AttributeI Summoning_Machine_Num_Casters = new D3AttributeI(675, 0, -1, 0, 1, "", "", "Summoning_Machine_Num_Casters", D3AttributeEncoding.IntMinMax, 0, 0, 255, 8);
        public static readonly D3AttributeI Summoning_Machine_Spawn_Count = new D3AttributeI(676, 0, 15, 0, 1, "", "", "Summoning_Machine_Spawn_Count", D3AttributeEncoding.IntMinMax, 0, 0, 4095, 12);
        public static readonly D3AttributeI Summoning_Machine_Next_Spawn_Ticks = new D3AttributeI(677, 0, -1, 0, 1, "", "", "Summoning_Machine_Next_Spawn_Ticks", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Summoning_Machine_Spawn_Team = new D3AttributeI(678, -1, -1, 1, 1, "", "", "Summoning_Machine_Spawn_Team", D3AttributeEncoding.IntMinMax, 0, -1, 23, 5);
        public static readonly D3AttributeF Screen_Attack_Radius_Constant = new D3AttributeF(679, 1114636288, -1, 3, 0, "", "", "Screen_Attack_Radius_Constant", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeF Damage_Done_Reduction_Percent = new D3AttributeF(680, 0, -1, 1, 0, "", "", "Damage_Done_Reduction_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeI Set_Item_Count = new D3AttributeI(681, 0, 17, 0, 1, "", "", "Set_Item_Count", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeF Spawner_Countdown_Percent = new D3AttributeF(682, 0, -1, 1, 0, "", "", "Spawner_Countdown_Percent", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeB Attack_Slow = new D3AttributeB(683, 0, -1, 1, 1, "", "", "Attack_Slow", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Power_Disabled = new D3AttributeB(684, 0, 4, 1, 1, "", "", "Power_Disabled", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Weapon_Effect_Override = new D3AttributeI(685, 0, -1, 1, 1, "", "", "Weapon_Effect_Override", D3AttributeEncoding.IntMinMax, 31, 0, 14, 4);
        public static readonly D3AttributeF Debuff_Duration_Reduction_Percent = new D3AttributeF(686, 0, -1, 0, 0, "", "", "Debuff_Duration_Reduction_Percent", D3AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly D3AttributeB Uses_PvP_Power_Tags = new D3AttributeB(687, 0, -1, 1, 1, "", "", "Uses_PvP_Power_Tags", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Trait = new D3AttributeI(688, 0, 4, 1, 1, "", "", "Trait", D3AttributeEncoding.IntMinMax, 31, -1, 30, 5);
        public static readonly D3AttributeI Last_ACD_Attacked_By = new D3AttributeI(689, -1, -1, 3, 1, "", "", "Last_ACD_Attacked_By", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeF Gold_PickUp_Radius = new D3AttributeF(690, 0, -1, 0, 0, "", "", "Gold_PickUp_Radius", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeI Client_Only_Effect = new D3AttributeI(691, 0, 12, 1, 1, "", "", "Client Only Effect", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeB Has_Doppelganger_Cloned = new D3AttributeB(692, 0, -1, 1, 1, "", "", "Has_Doppelganger_Cloned", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeF Resource_Gain_Bonus_Percent = new D3AttributeF(693, 0, 10, 0, 0, "", "", "Resource_Gain_Bonus_Percent", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeI Looping_Animation_Start_Time = new D3AttributeI(694, 0, -1, 1, 1, "", "", "Looping_Animation_Start_Time", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Looping_Animation_End_Time = new D3AttributeI(695, 0, -1, 1, 1, "", "", "Looping_Animation_End_Time", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeI Heal_Effect_Last_Played_Tick = new D3AttributeI(696, -1, -1, 3, 1, "", "", "Heal_Effect_Last_Played_Tick", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Resource_Effect_Last_Played_tick = new D3AttributeI(697, -1, 10, 3, 1, "", "", "Resource_Effect_Last_Played_tick", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Thorns_Effect_Last_Played_tick = new D3AttributeI(698, -1, -1, 3, 1, "", "", "Thorns_Effect_Last_Played_tick", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI PVP_Kills = new D3AttributeI(699, 0, -1, 0, 1, "", "", "PVP_Kills", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI PVP_Deaths = new D3AttributeI(700, 0, -1, 0, 1, "", "", "PVP_Deaths", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI PVP_Assists = new D3AttributeI(701, 0, -1, 0, 1, "", "", "PVP_Assists", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI PVP_Progression_Points_Gained = new D3AttributeI(702, 0, -1, 0, 1, "", "", "PVP_Progression_Points_Gained", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI PVP_Current_Kill_Streak = new D3AttributeI(703, 0, -1, 0, 1, "", "", "PVP_Current_Kill_Streak", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI PVP_Current_Death_Streak = new D3AttributeI(704, 0, -1, 0, 1, "", "", "PVP_Current_Death_Streak", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI PVP_Longest_Kill_Streak = new D3AttributeI(705, 0, -1, 0, 1, "", "", "PVP_Longest_Kill_Streak", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI PVP_Longest_Death_Streak = new D3AttributeI(706, 0, -1, 0, 1, "", "", "PVP_Longest_Death_Streak", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeF Turn_Rate_Scalar = new D3AttributeF(707, 1065353216, -1, 5, 0, "", "", "Turn_Rate_Scalar", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeF Turn_Accel_Scalar = new D3AttributeF(708, 1065353216, -1, 5, 0, "", "", "Turn_Accel_Scalar", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeF Turn_Deccel_Scalar = new D3AttributeF(709, 1065353216, -1, 5, 0, "", "", "Turn_Deccel_Scalar", D3AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly D3AttributeB No_Health_Drop = new D3AttributeB(710, 0, -1, 1, 1, "", "", "No_Health_Drop", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Leader = new D3AttributeB(711, 0, -1, 1, 1, "", "", "Leader", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB IsTrialActor = new D3AttributeB(712, 0, -1, 1, 1, "", "", "IsTrialActor", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB InBossEncounter = new D3AttributeB(713, 0, -1, 1, 1, "", "", "InBossEncounter", D3AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly D3AttributeB God = new D3AttributeB(714, 0, -1, 1, 1, "", "", "God", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB MinimapActive = new D3AttributeB(715, 0, -1, 1, 1, "", "", "MinimapActive", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI MinimapIconOverride = new D3AttributeI(716, -1, -1, 0, 1, "", "", "MinimapIconOverride", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeB MinimapDisableArrow = new D3AttributeB(717, 0, -1, 1, 1, "", "", "MinimapDisableArrow", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeI Last_Blocked_ACD = new D3AttributeI(718, -1, -1, 3, 1, "", "", "Last_Blocked_ACD", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Last_Blocked_Time = new D3AttributeI(719, 0, -1, 1, 1, "", "", "Last_Blocked_Time", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeB Deactivate_Lure = new D3AttributeB(720, 0, -1, 1, 1, "", "", "Deactivate Lure", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeB Weapons_Hidden = new D3AttributeB(721, 0, -1, 1, 1, "", "", "Weapons_Hidden", D3AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly D3AttributeB Actor_Updates_Attributes_From_Owner = new D3AttributeB(722, 0, -1, 1, 1, "", "", "Actor_Updates_Attributes_From_Owner", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeI Taunt_Target_ACD = new D3AttributeI(723, -1, -1, 1, 1, "", "", "Taunt_Target_ACD", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeF UI_Only_Percent_Damage_Increase = new D3AttributeF(724, 0, -1, 0, 0, "", "", "UI_Only_Percent_Damage_Increase", D3AttributeEncoding.Float16, 1, 0, 0, 16);
        public static readonly D3AttributeI Projectile_Effect_SNO = new D3AttributeI(725, -1, -1, 3, 1, "", "", "Projectile_Effect_SNO", D3AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly D3AttributeF On_Hit_Fear_Proc_Chance = new D3AttributeF(726, 0, -1, 7, 0, "", "", "On_Hit_Fear_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF On_Hit_Stun_Proc_Chance = new D3AttributeF(727, 0, -1, 7, 0, "", "", "On_Hit_Stun_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF On_Hit_Blind_Proc_Chance = new D3AttributeF(728, 0, -1, 7, 0, "", "", "On_Hit_Blind_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF On_Hit_Freeze_Proc_Chance = new D3AttributeF(729, 0, -1, 7, 0, "", "", "On_Hit_Freeze_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF On_Hit_Chill_Proc_Chance = new D3AttributeF(730, 0, -1, 7, 0, "", "", "On_Hit_Chill_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF On_Hit_Slow_Proc_Chance = new D3AttributeF(731, 0, -1, 7, 0, "", "", "On_Hit_Slow_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF On_Hit_Immobilize_Proc_Chance = new D3AttributeF(732, 0, -1, 7, 0, "", "", "On_Hit_Immobilize_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF On_Hit_Knockback_Proc_Chance = new D3AttributeF(733, 0, -1, 7, 0, "", "", "On_Hit_Knockback_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Percent_Reduction_From_Ranged = new D3AttributeF(734, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_From_Ranged", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Percent_Reduction_From_Melee = new D3AttributeF(735, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_From_Melee", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Percent_Reduction_Turns_Into_Heal = new D3AttributeF(736, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_Turns_Into_Heal", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Damage_Percent_Percent_Bonus_Vs_Monster_Type = new D3AttributeF(737, 0, 18, 7, 0, "", "", "Damage_Percent_Percent_Bonus_Vs_Monster_Type", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeI Item_Manipulation_Timeout = new D3AttributeI(738, 0, -1, 4, 1, "", "", "Item_Manipulation_Timeout", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeI Picked_Up_Time = new D3AttributeI(739, 0, -1, 4, 1, "", "", "Picked_Up_Time", D3AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly D3AttributeI Unequipped_Time = new D3AttributeI(740, 1, 19, 4, 1, "", "", "Unequipped Time", D3AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly D3AttributeI Last_ACD_Killed_Time = new D3AttributeI(741, 0, -1, 4, 1, "", "", "Last_ACD_Killed_Time", D3AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly D3AttributeB CannotDieDuring = new D3AttributeB(742, 0, -1, 1, 1, "", "", "CannotDieDuring", D3AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly D3AttributeF Weapon_On_Hit_Fear_Proc_Chance = new D3AttributeF(743, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Fear_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Stun_Proc_Chance = new D3AttributeF(744, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Stun_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Blind_Proc_Chance = new D3AttributeF(745, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Blind_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Freeze_Proc_Chance = new D3AttributeF(746, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Freeze_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Chill_Proc_Chance = new D3AttributeF(747, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Chill_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Slow_Proc_Chance = new D3AttributeF(748, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Slow_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Immobilize_Proc_Chance = new D3AttributeF(749, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Immobilize_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Knockback_Proc_Chance = new D3AttributeF(750, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Knockback_Proc_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Fear_Proc_Chance_MainHand = new D3AttributeF(751, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Fear_Proc_Chance )", "", "Weapon_On_Hit_Fear_Proc_Chance_MainHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Fear_Proc_Chance_OffHand = new D3AttributeF(752, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Fear_Proc_Chance : 0)", "", "Weapon_On_Hit_Fear_Proc_Chance_OffHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Fear_Proc_Chance_CurrentHand = new D3AttributeF(753, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Fear_Proc_Chance_OffHand : Weapon_On_Hit_Fear_Proc_Chance_MainHand)", "Weapon_On_Hit_Fear_Proc_Chance_CurrentHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Stun_Proc_Chance_MainHand = new D3AttributeF(754, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Stun_Proc_Chance )", "", "Weapon_On_Hit_Stun_Proc_Chance_MainHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Stun_Proc_Chance_OffHand = new D3AttributeF(755, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Stun_Proc_Chance : 0)", "", "Weapon_On_Hit_Stun_Proc_Chance_OffHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Stun_Proc_Chance_CurrentHand = new D3AttributeF(756, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Stun_Proc_Chance_OffHand : Weapon_On_Hit_Stun_Proc_Chance_MainHand)", "Weapon_On_Hit_Stun_Proc_Chance_CurrentHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Blind_Proc_Chance_MainHand = new D3AttributeF(757, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Blind_Proc_Chance )", "", "Weapon_On_Hit_Blind_Proc_Chance_MainHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Blind_Proc_Chance_OffHand = new D3AttributeF(758, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Blind_Proc_Chance : 0)", "", "Weapon_On_Hit_Blind_Proc_Chance_OffHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Blind_Proc_Chance_CurrentHand = new D3AttributeF(759, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Blind_Proc_Chance_OffHand : Weapon_On_Hit_Blind_Proc_Chance_MainHand)", "Weapon_On_Hit_Blind_Proc_Chance_CurrentHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Freeze_Proc_Chance_MainHand = new D3AttributeF(760, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Freeze_Proc_Chance )", "", "Weapon_On_Hit_Freeze_Proc_Chance_MainHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Freeze_Proc_Chance_OffHand = new D3AttributeF(761, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Freeze_Proc_Chance : 0)", "", "Weapon_On_Hit_Freeze_Proc_Chance_OffHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Freeze_Proc_Chance_CurrentHand = new D3AttributeF(762, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Freeze_Proc_Chance_OffHand : Weapon_On_Hit_Freeze_Proc_Chance_MainHand)", "Weapon_On_Hit_Freeze_Proc_Chance_CurrentHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Chill_Proc_Chance_MainHand = new D3AttributeF(763, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Chill_Proc_Chance )", "", "Weapon_On_Hit_Chill_Proc_Chance_MainHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Chill_Proc_Chance_OffHand = new D3AttributeF(764, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Chill_Proc_Chance : 0)", "", "Weapon_On_Hit_Chill_Proc_Chance_OffHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Chill_Proc_Chance_CurrentHand = new D3AttributeF(765, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Chill_Proc_Chance_OffHand : Weapon_On_Hit_Chill_Proc_Chance_MainHand)", "Weapon_On_Hit_Chill_Proc_Chance_CurrentHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Slow_Proc_Chance_MainHand = new D3AttributeF(766, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Slow_Proc_Chance )", "", "Weapon_On_Hit_Slow_Proc_Chance_MainHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Slow_Proc_Chance_OffHand = new D3AttributeF(767, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Slow_Proc_Chance : 0)", "", "Weapon_On_Hit_Slow_Proc_Chance_OffHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Slow_Proc_Chance_CurrentHand = new D3AttributeF(768, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Slow_Proc_Chance_OffHand : Weapon_On_Hit_Slow_Proc_Chance_MainHand)", "Weapon_On_Hit_Slow_Proc_Chance_CurrentHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Immobilize_Proc_Chance_MainHand = new D3AttributeF(769, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Immobilize_Proc_Chance )", "", "Weapon_On_Hit_Immobilize_Proc_Chance_MainHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Immobilize_Proc_Chance_OffHand = new D3AttributeF(770, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Immobilize_Proc_Chance : 0)", "", "Weapon_On_Hit_Immobilize_Proc_Chance_OffHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Immobilize_Proc_Chance_CurrentHand = new D3AttributeF(771, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Immobilize_Proc_Chance_OffHand : Weapon_On_Hit_Immobilize_Proc_Chance_MainHand)", "Weapon_On_Hit_Immobilize_Proc_Chance_CurrentHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Knockback_Proc_Chance_MainHand = new D3AttributeF(772, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Knockback_Proc_Chance )", "", "Weapon_On_Hit_Knockback_Proc_Chance_MainHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Knockback_Proc_Chance_OffHand = new D3AttributeF(773, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Knockback_Proc_Chance : 0)", "", "Weapon_On_Hit_Knockback_Proc_Chance_OffHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_On_Hit_Knockback_Proc_Chance_CurrentHand = new D3AttributeF(774, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Knockback_Proc_Chance_OffHand : Weapon_On_Hit_Knockback_Proc_Chance_MainHand)", "Weapon_On_Hit_Knockback_Proc_Chance_CurrentHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Power_Damage_Percent_Bonus = new D3AttributeF(775, 0, 4, 0, 0, "", "", "Power_Damage_Percent_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Power_Resource_Reduction = new D3AttributeF(776, 0, 4, 0, 0, "", "", "Power_Resource_Reduction", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Power_Cooldown_Reduction = new D3AttributeF(777, 0, 4, 0, 0, "", "", "Power_Cooldown_Reduction", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Power_Duration_Increase = new D3AttributeF(778, 0, 4, 0, 0, "", "", "Power_Duration_Increase", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Power_Crit_Percent_Bonus = new D3AttributeF(779, 0, 4, 0, 0, "", "", "Power_Crit_Percent_Bonus", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_Crit_Chance = new D3AttributeF(780, 0, -1, 7, 0, "", "", "Weapon_Crit_Chance", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_Crit_Chance_MainHand = new D3AttributeF(781, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_Crit_Chance )", "", "Weapon_Crit_Chance_MainHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_Crit_Chance_OffHand = new D3AttributeF(782, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_Crit_Chance : 0)", "", "Weapon_Crit_Chance_OffHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly D3AttributeF Weapon_Crit_Chance_CurrentHand = new D3AttributeF(783, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_Crit_Chance_OffHand : Weapon_Crit_Chance_MainHand)", "Weapon_Crit_Chance_CurrentHand", D3AttributeEncoding.Float16, 9, 0, 0, 16);
    }
}
